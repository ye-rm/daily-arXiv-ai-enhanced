{"id": "2510.13147", "categories": ["cs.AR", "cs.LG", "cs.PF", "C.1.4"], "pdf": "https://arxiv.org/pdf/2510.13147", "abs": "https://arxiv.org/abs/2510.13147", "authors": ["Faraz Tahmasebi", "Michael Pelluer", "Hyoukjun Kwon"], "title": "D-com: Accelerating Iterative Processing to Enable Low-rank Decomposition of Activations", "comment": "12 pages, 13 figures", "summary": "The computation and memory costs of large language models kept increasing\nover last decade, which reached over the scale of 1T parameters. To address the\nchallenges from the large scale models, model compression techniques such as\nlow-rank decomposition have been explored. Previous model decomposition works\nhave focused on weight decomposition to avoid costly runtime decomposition,\nwhose latency often significantly exceeds the benefits from decomposition\n(e.g., 38% more end-to-end latency when running Llama2-7b on A100 with 4K\nsequence length with activation decomposition compared to no decomposition). In\nthis work, we debunk such observations and report that the input decomposition\ncan be significantly beneficial with a proper choice of decomposition algorithm\nand hardware support. We adopt progressive decomposition algorithm, Lanczos\nalgorithm, and design a co-accelerator architecture for the decomposition\nalgorithm. To address the memory- boundness of the decomposition operation, we\nintroduce a novel compute replication methodology that moves the op- eration\ntoward compute-bound region, which enables 6.2x speedup in our evaluation. We\nalso develop an output shape- preserving computation scheme that eliminates\ndecomposi- tion costs in consecutive layers. To compensate model quality loss\nfrom compression, we introduce a multi-track decom- position approach that\nseparately handles outlier channels for high accuracy and low perplexity with\nminimal compu- tational costs. Combined together, our accelerator, D-com,\nprovides 22% end-to-end latency improvements compared to A100 GPU at the cost\nof small model quality degradation (e.g., 3% on AI2 Reasoning Challenge task).", "AI": {"tldr": "This paper introduces D-com, a novel accelerator architecture that enables efficient input decomposition for large language models, overcoming previous limitations by using progressive decomposition algorithms and compute replication to achieve significant speedup with minimal model quality degradation.", "motivation": "Large language models have reached over 1T parameters, creating computational and memory challenges. Previous model decomposition approaches focused on weight decomposition but incurred high runtime latency that often exceeded the benefits.", "method": "The authors adopt progressive decomposition using Lanczos algorithm, design a co-accelerator architecture, introduce compute replication to address memory-bound operations, develop output shape-preserving computation, and implement multi-track decomposition to handle outlier channels separately.", "result": "The proposed D-com accelerator achieves 6.2x speedup in decomposition operations and provides 22% end-to-end latency improvements compared to A100 GPU, with only small model quality degradation (e.g., 3% on AI2 Reasoning Challenge task).", "conclusion": "Input decomposition can be significantly beneficial with proper algorithm selection and hardware support, overcoming previous limitations and providing substantial performance improvements for large language models."}}
{"id": "2510.13362", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.13362", "abs": "https://arxiv.org/abs/2510.13362", "authors": ["Angelos Athanasiadis", "Nikolaos Tampouratzis", "Ioannis Papaefstathiou"], "title": "Energy-Efficient FPGA Framework for Non-Quantized Convolutional Neural Networks", "comment": "9th International Workoshop on Microsystems, International Hellenic\n  University", "summary": "The growing demand for real-time processing in artificial intelligence\napplications, particularly those involving Convolutional Neural Networks\n(CNNs), has highlighted the need for efficient computational solutions.\nConventional processors, very often, fall short in balancing performance, power\nconsumption, and latency, especially in embedded systems and edge computing\nplatforms. Field-Programmable Gate Arrays (FPGAs) offer a promising\nalternative, combining high performance with energy efficiency and\nreconfigurability. The presented framework addresses the complex and demanding\ncomputations of CNNs on FPGAs maintaining full precision in all neural network\nparameters. Specifically, our framework is based on Darknet which is very\nwidely used for the design of CNNs and allows the designer, by using a similar\ninput to that given to Darknet, to efficiently implement a CNN in a\nheterogeneous system comprising of CPUs and FPGAs. When compared with the FPGA\nframeworks that support quantization, our solution aims to offer similar\nperformance and/or energy efficiency without any degradation on the NN\naccuracy.", "AI": {"tldr": "A framework for implementing full-precision CNNs on FPGAs using Darknet, achieving similar performance and energy efficiency as quantized FPGA solutions without accuracy loss.", "motivation": "Real-time AI applications need efficient computational solutions as conventional processors struggle with performance, power, and latency balance in embedded/edge systems.", "method": "Uses Darknet-based framework to implement CNNs on heterogeneous CPU-FPGA systems while maintaining full precision in all neural network parameters.", "result": "Achieves similar performance and energy efficiency compared to FPGA frameworks that use quantization, but without any degradation in neural network accuracy.", "conclusion": "FPGAs provide a promising alternative for CNN implementation, combining high performance with energy efficiency and reconfigurability while preserving full precision."}}
{"id": "2510.13401", "categories": ["cs.AR", "cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.13401", "abs": "https://arxiv.org/abs/2510.13401", "authors": ["Jude Haris", "Jos\u00e9 Cano"], "title": "F-BFQ: Flexible Block Floating-Point Quantization Accelerator for LLMs", "comment": "Accepted to Workshop on New Approaches for Addressing the Computing\n  Requirements of LLMs and GNNs (LG-ARC) @ ISCA 2025", "summary": "Large Language Models (LLMs) have become increasingly prominent for daily\ntasks, from improving sound-totext translation to generating additional frames\nfor the latest video games. With the help of LLM inference frameworks, such as\nllama.cpp, which support optimizations such as KV-caching and quantization, it\nis now easier than ever to deploy LLMs on edge devices. Quantization is\nfundamental to enable LLMs on resource-constrained edge devices, and llama.cpp\nutilizes block floating point (BFP) quantization to drastically reduce the bit\nwidth of weights and input tensors, the memory footprint, and the computational\npower required to run LLMs. LLMs are typically quantized with mixed BFP\nquantization across the model layers to reduce the loss of model accuracy due\nto quantization. Therefore, to efficiently accelerate across the layers of\nBFP-quantized LLMs, specialized accelerators need to support different BFP\nvariants without reconfiguration. To address this issue, we propose a Flexible\nBlock FloatingPoint Quantization (F-BFQ) accelerator, which can dynamically\nswitch between two BFP quantization variants and perform matrix multiplication\n(MatMul) operations. Our initial F-BFQ accelerator design, deployed on the AMD\nKria board, reduces inference time by 1.4x on average over the Arm NEON-based\nCPU execution across three BFP quantized LLMs while achieving 5.2 tokens per\nsecond (~3.9 words per second).", "AI": {"tldr": "The paper proposes F-BFQ, a flexible accelerator for BFP-quantized LLMs that dynamically switches between BFP variants without reconfiguration, achieving 1.4x speedup over CPU execution on edge devices.", "motivation": "LLMs are increasingly deployed on edge devices using quantization techniques like BFP to reduce memory and computational requirements. However, mixed BFP quantization across model layers requires specialized accelerators that can handle different BFP variants without reconfiguration overhead.", "method": "Proposed a Flexible Block Floating-Point Quantization (F-BFQ) accelerator that can dynamically switch between two BFP quantization variants and perform matrix multiplication operations. The design was deployed on AMD Kria board.", "result": "The F-BFQ accelerator reduced inference time by 1.4x on average over Arm NEON-based CPU execution across three BFP quantized LLMs, achieving 5.2 tokens per second (~3.9 words per second).", "conclusion": "The F-BFQ accelerator successfully addresses the need for flexible hardware support for mixed BFP quantization in LLMs, enabling efficient deployment on resource-constrained edge devices with significant performance improvements over CPU-based execution."}}
{"id": "2510.12889", "categories": ["cs.DC", "C.2.4"], "pdf": "https://arxiv.org/pdf/2510.12889", "abs": "https://arxiv.org/abs/2510.12889", "authors": ["Wei Da", "Evangelia Kalyvianaki"], "title": "Dodoor: Efficient Randomized Decentralized Scheduling with Load Caching for Heterogeneous Tasks and Clusters", "comment": "single column,20 pages and 8 figures", "summary": "This paper introduces Dodoor, an efficient randomized decentralized scheduler\ndesigned for task scheduling in modern data centers. Dodoor leverages advanced\nresearch on the weighted balls-into-bins model with b-batched setting. Unlike\nother decentralized schedulers that rely on real-time probing of remote\nservers, Dodoor makes scheduling decisions based on cached server information,\nwhich is updated in batches, to reduce communication overheads. To schedule\ntasks with dynamic, multidimensional resource requirements in heterogeneous\ncluster, Dodoor uses a novel load score to measure servers' loads for each\nscheduled task. This score captures the anti-affinity between servers and tasks\nin contrast to the commonly used heuristic of counting pending tasks to balance\nload. On a 101-node heterogeneous cluster, Dodoor is evaluated using two\nworkloads: (i) simulated Azure virtual machines placements and (ii) real\nserverless Python functions executions in Docker. The evaluation shows that\nDodoor reduces scheduling messages by 55--66% on both workloads. Dodoor can\nalso increase throughput by up to 33.2% and 21.5%, reduce mean makespan latency\nby 12.1% and 7.2%, and improve tail latency by 21.9% and 24.6% across the two\nworkloads.", "AI": {"tldr": "Dodoor is an efficient decentralized scheduler for data centers that uses cached server information and batch updates to reduce communication overhead by 55-66%, while improving throughput, latency, and makespan through a novel load scoring mechanism.", "motivation": "To address the communication overhead in decentralized schedulers that rely on real-time probing, and to better handle dynamic, multidimensional resource requirements in heterogeneous clusters.", "method": "Leverages weighted balls-into-bins model with b-batched setting, uses cached server information updated in batches, and employs a novel load score that captures anti-affinity between servers and tasks instead of just counting pending tasks.", "result": "Reduces scheduling messages by 55-66%, increases throughput by up to 33.2% and 21.5%, reduces mean makespan latency by 12.1% and 7.2%, and improves tail latency by 21.9% and 24.6% across Azure VM placements and serverless function workloads.", "conclusion": "Dodoor demonstrates significant improvements in communication efficiency and scheduling performance for heterogeneous data center environments through its batch-based approach and novel load scoring mechanism."}}
{"id": "2510.13203", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.13203", "abs": "https://arxiv.org/abs/2510.13203", "authors": ["Mehdi Zekriyapanah Gashti"], "title": "Scrutiny new framework in integrated distributed reliable systems", "comment": null, "summary": "In this paper we represent a new framework for integrated distributed\nsystems. In the proposed framework we have used three parts to increase\nSatisfaction and Performance of this framework. At first we analyse integrated\nsystems and their evolution process and also ERPSD and ERPDRT framework briefly\nthen we explain the new FDIRS framework. Finally we compare the results of\nsimulation of the new framework with presented frameworks. Result showed In\nFIDRS framework, the technique of heterogeneous distributed data base is used\nto improve Performance and speed in responding to users. Finally by using FDIRS\nframework we succeeded to increase Efficiency, Performance and reliability of\nintegrated systems and remove some of previous frameworks problems.", "AI": {"tldr": "A new FDIRS framework for integrated distributed systems that improves performance, efficiency, and reliability using heterogeneous distributed database techniques.", "motivation": "To address limitations in existing integrated systems frameworks (ERPSD and ERPDRT) and improve system performance, speed, and reliability.", "method": "Proposed FDIRS framework using heterogeneous distributed database technique, analyzed existing frameworks, and conducted simulations for comparison.", "result": "FDIRS framework showed improved performance, speed in user response, efficiency, and reliability while eliminating problems from previous frameworks.", "conclusion": "The FDIRS framework successfully enhances integrated distributed systems by overcoming previous framework limitations and delivering better performance metrics."}}
{"id": "2510.13223", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.13223", "abs": "https://arxiv.org/abs/2510.13223", "authors": ["Yiyuan He", "Minxian Xu", "Jingfeng Wu", "Jianmin Hu", "Chong Ma", "Min Shen", "Le Chen", "Chengzhong Xu", "Lin Qu", "Kejiang Ye"], "title": "BanaServe: Unified KV Cache and Dynamic Module Migration for Balancing Disaggregated LLM Serving in AI Infrastructure", "comment": "23 pages", "summary": "Large language models (LLMs) are increasingly deployed in AI infrastructure,\ndriving the need for high throughput, resource efficient serving systems.\nDisaggregated LLM serving, which separates prompt prefill from auto-regressive\ndecode, has emerged as a promising architecture by isolating their\nheterogeneous compute and memory demands. However, current disaggregated\nsystems face three key limitations: (i) static resource allocation cannot adapt\nto highly dynamic workloads, causing over-provisioning that wastes resources or\nunder-provisioning that violates service level objectives (SLOs); (ii) inherent\nload imbalance between prefill and decode stages, where prefill is\ncompute-bound and decode is memory-bound, causes under-utilization in one tier\nwhile the other becomes a bottleneck; and (iii) prefix cache aware routing\nskews load distribution, as high cache hit rate prefill nodes attract\ndisproportionately more requests, further degrading balance and efficiency. To\naddress these issues, we present BanaServe, a dynamic orchestration framework\nthat continuously rebalances computational and memory resources across prefill\nand decode instances while eliminating hotspots induced by cache. BanaServe\nintroduces layer level weight migration, attention level Key Value Cache (KV\nCache) migration, and Global KV Cache Store sharing with layer wise overlapped\ntransmission, enabling both coarse grained (layer level) and fine grained\n(attention level) load redistribution with minimal latency overhead. These\nmechanisms allow routers to perform purely load aware scheduling, unconstrained\nby cache placement. Compared to vLLM, BanaServe achieves 1.2x-3.9x higher\nthroughput with 3.9%-78.4% lower total processing time, and outperforms\nDistServe by 1.1x-2.8x in throughput with 1.4%-70.1% latency reduction.", "AI": {"tldr": "BanaServe is a dynamic orchestration framework for disaggregated LLM serving that addresses resource allocation inefficiencies, load imbalance between prefill and decode stages, and cache-induced hotspots through layer-level weight migration, attention-level KV Cache migration, and global cache sharing.", "motivation": "Current disaggregated LLM serving systems face three key limitations: static resource allocation cannot adapt to dynamic workloads, inherent load imbalance between compute-bound prefill and memory-bound decode stages, and prefix cache aware routing that skews load distribution and causes hotspots.", "method": "BanaServe introduces layer level weight migration, attention level Key Value Cache (KV Cache) migration, and Global KV Cache Store sharing with layer wise overlapped transmission, enabling both coarse-grained (layer level) and fine-grained (attention level) load redistribution with minimal latency overhead.", "result": "Compared to vLLM, BanaServe achieves 1.2x-3.9x higher throughput with 3.9%-78.4% lower total processing time, and outperforms DistServe by 1.1x-2.8x in throughput with 1.4%-70.1% latency reduction.", "conclusion": "BanaServe effectively addresses the key limitations of current disaggregated LLM serving systems by enabling dynamic resource rebalancing and eliminating cache-induced hotspots, resulting in significantly improved throughput and reduced latency."}}
{"id": "2510.13306", "categories": ["cs.DC", "cs.DS"], "pdf": "https://arxiv.org/pdf/2510.13306", "abs": "https://arxiv.org/abs/2510.13306", "authors": ["Jannick Borowitz", "Ernestine Gro\u00dfmann", "Mattthias Schimek"], "title": "Distributed Reductions for the Maximum Weight Independent Set Problem", "comment": null, "summary": "Finding maximum-weight independent sets in graphs is an important NP-hard\noptimization problem. Given a vertex-weighted graph $G$, the task is to find a\nsubset of pairwise non-adjacent vertices of $G$ with maximum weight. Most\nrecently published practical exact algorithms and heuristics for this problem\nuse a variety of data-reduction rules to compute (near-)optimal solutions.\nApplying these rules results in an equivalent instance of reduced size. An\noptimal solution to the reduced instance can be easily used to construct an\noptimal solution for the original input.\n  In this work, we present the first distributed-memory parallel reduction\nalgorithms for this problem, targeting graphs beyond the scale of previous\nsequential approaches. Furthermore, we propose the first distributed\nreduce-and-greedy and reduce-and-peel algorithms for finding a maximum weight\nindependent set heuristically.\n  In our practical evaluation, our experiments on up to $1024$ processors\ndemonstrate good scalability of our distributed reduce algorithms while\nmaintaining good reduction impact. Our asynchronous reduce-and-peel approach\nachieves an average speedup of $33\\times$ over a sequential state-of-the-art\nreduce-and-peel approach on 36 real-world graphs with a solution quality close\nto the sequential algorithm. Our reduce-and-greedy algorithms even achieve\naverage speedups of up to $50\\times$ at the cost of a lower solution quality.\nMoreover, our distributed approach allows us to consider graphs with more than\none billion vertices and 17 billion edges.", "AI": {"tldr": "This paper presents the first distributed-memory parallel reduction algorithms for finding maximum-weight independent sets in large graphs, achieving significant speedups over sequential approaches while maintaining good solution quality.", "motivation": "Finding maximum-weight independent sets is an important NP-hard optimization problem, but existing approaches are sequential and cannot handle graphs at massive scales. There's a need for distributed algorithms that can process billion-scale graphs efficiently.", "method": "The authors developed distributed-memory parallel reduction algorithms, including distributed reduce-and-greedy and reduce-and-peel algorithms. These use data-reduction rules to create equivalent smaller instances while maintaining the ability to reconstruct optimal solutions.", "result": "Experiments on up to 1024 processors showed good scalability and reduction impact. The asynchronous reduce-and-peel approach achieved 33\u00d7 average speedup over sequential state-of-the-art methods with similar solution quality. Reduce-and-greedy achieved up to 50\u00d7 speedup at lower quality. The approach handled graphs with over 1 billion vertices and 17 billion edges.", "conclusion": "The proposed distributed algorithms enable efficient processing of massive graphs for maximum-weight independent set problems, offering significant speed improvements while maintaining competitive solution quality compared to sequential approaches."}}
{"id": "2510.13447", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.13447", "abs": "https://arxiv.org/abs/2510.13447", "authors": ["Julian Legler", "Sebastian Werner", "Maria C. Borges", "Stefan Tai"], "title": "Service-Level Energy Modeling and Experimentation for Cloud-Native Microservices", "comment": "Accepted at ICSOC 2025", "summary": "Microservice architectures have become the dominant paradigm for cloud-native\nsystems, offering flexibility and scalability. However, this shift has also led\nto increased demand for cloud resources, contributing to higher energy\nconsumption and carbon emissions. While existing research has focused on\nmeasuring fine-grained energy usage of CPU and memory at the container level,\nor on system-wide assessments, these approaches often overlook the energy\nimpact of cross-container service interactions, especially those involving\nnetwork and storage for auxiliary services such as observability and system\nmonitoring. To address this gap, we introduce a service-level energy model that\ncaptures the distributed nature of microservice execution across containers.\nOur model is supported by an experimentation tool that accounts for energy\nconsumption not just in CPU and memory, but also in network and storage\ncomponents. We validate our approach through extensive experimentation with\ndiverse experiment configurations of auxiliary services for a popular\nopen-source cloud-native microservice application. Results show that omitting\nnetwork and storage can lead to an underestimation of auxiliary service energy\nuse by up to 63%, highlighting the need for more comprehensive energy\nassessments in the design of energy-efficient microservice architectures.", "AI": {"tldr": "This paper introduces a service-level energy model for microservices that captures energy consumption across containers, including network and storage components, addressing gaps in existing approaches that overlook cross-container service interactions.", "motivation": "Microservice architectures increase cloud resource demand and energy consumption, but existing energy measurement approaches focus on CPU/memory at container level or system-wide assessments, missing the energy impact of cross-container interactions and auxiliary services like observability and monitoring.", "method": "The authors developed a service-level energy model that captures distributed microservice execution across containers, supported by an experimentation tool that measures energy consumption in CPU, memory, network, and storage components.", "result": "Experimental validation with diverse configurations of auxiliary services showed that omitting network and storage energy measurements can lead to underestimation of auxiliary service energy use by up to 63%.", "conclusion": "Comprehensive energy assessments including network and storage components are essential for designing energy-efficient microservice architectures, as traditional approaches significantly underestimate the energy impact of auxiliary services."}}
{"id": "2510.13668", "categories": ["cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.13668", "abs": "https://arxiv.org/abs/2510.13668", "authors": ["Zhibin Wang", "Zetao Hong", "Xue Li", "Zibo Wang", "Shipeng Li", "Qingkai Meng", "Qing Wang", "Chengying Huan", "Rong Gu", "Sheng Zhong", "Chen Tian"], "title": "Adaptive Rescheduling in Prefill-Decode Disaggregated LLM Inference", "comment": null, "summary": "Large Language Model (LLM) inference has emerged as a fundamental paradigm.\nIn real-world scenarios, variations in output length cause severe workload\nimbalance in the decode phase, particularly for long-output reasoning tasks.\nExisting systems, such as PD disaggregation architectures, rely on static\nprefill-to-decode scheduling, which often results in SLO violations and OOM\nfailures under evolving decode workloads.\n  In this paper, we propose ARES, an adaptive decoding rescheduling system\npowered by length prediction to anticipate future workloads. Our core\ncontributions include: (1) A lightweight and continuous LLM-native prediction\nmethod that leverages LLM hidden state to model remaining generation length\nwith high precision (reducing MAE by 49.42%) and low overhead (cutting\npredictor parameters by 93.28%); (2) A rescheduling solution in decode phase\nwith : A dynamic balancing mechanism that integrates current and predicted\nworkloads, reducing P99 TPOT by 74.77% and achieving up to 2.24 times higher\ngoodput.", "AI": {"tldr": "ARES is an adaptive decoding rescheduling system that uses LLM-native length prediction to address workload imbalance in LLM inference, improving performance and reducing failures.", "motivation": "Existing LLM inference systems suffer from workload imbalance due to output length variations, causing SLO violations and OOM failures in decode phases, especially for long-output reasoning tasks.", "method": "Proposes a lightweight LLM-native prediction method using hidden states to model remaining generation length, and a dynamic balancing mechanism that integrates current and predicted workloads for rescheduling.", "result": "Reduces MAE by 49.42%, cuts predictor parameters by 93.28%, reduces P99 TPOT by 74.77%, and achieves up to 2.24 times higher goodput.", "conclusion": "ARES effectively addresses workload imbalance in LLM inference through adaptive rescheduling based on accurate length prediction, significantly improving system performance and reliability."}}
{"id": "2510.13724", "categories": ["cs.DC", "cs.AI", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.13724", "abs": "https://arxiv.org/abs/2510.13724", "authors": ["Aditya Tanikanti", "Benoit C\u00f4t\u00e9", "Yanfei Guo", "Le Chen", "Nickolaus Saint", "Ryan Chard", "Ken Raffenetti", "Rajeev Thakur", "Thomas Uram", "Ian Foster", "Michael E. Papka", "Venkatram Vishwanath"], "title": "FIRST: Federated Inference Resource Scheduling Toolkit for Scientific AI Model Access", "comment": null, "summary": "We present the Federated Inference Resource Scheduling Toolkit (FIRST), a\nframework enabling Inference-as-a-Service across distributed High-Performance\nComputing (HPC) clusters. FIRST provides cloud-like access to diverse AI\nmodels, like Large Language Models (LLMs), on existing HPC infrastructure.\nLeveraging Globus Auth and Globus Compute, the system allows researchers to run\nparallel inference workloads via an OpenAI-compliant API on private, secure\nenvironments. This cluster-agnostic API allows requests to be distributed\nacross federated clusters, targeting numerous hosted models. FIRST supports\nmultiple inference backends (e.g., vLLM), auto-scales resources, maintains\n\"hot\" nodes for low-latency execution, and offers both high-throughput batch\nand interactive modes. The framework addresses the growing demand for private,\nsecure, and scalable AI inference in scientific workflows, allowing researchers\nto generate billions of tokens daily on-premises without relying on commercial\ncloud infrastructure.", "AI": {"tldr": "FIRST is a framework that enables Inference-as-a-Service across distributed HPC clusters, providing cloud-like access to AI models like LLMs through an OpenAI-compliant API on private, secure environments.", "motivation": "To address the growing demand for private, secure, and scalable AI inference in scientific workflows, allowing researchers to generate billions of tokens daily on-premises without relying on commercial cloud infrastructure.", "method": "Leverages Globus Auth and Globus Compute to run parallel inference workloads via an OpenAI-compliant API on private HPC clusters. Supports multiple inference backends (e.g., vLLM), auto-scales resources, maintains 'hot' nodes for low-latency execution, and offers both high-throughput batch and interactive modes.", "result": "Enables researchers to run parallel inference workloads across federated clusters, targeting numerous hosted models in a cluster-agnostic manner.", "conclusion": "FIRST provides a scalable solution for private AI inference on existing HPC infrastructure, eliminating dependency on commercial cloud services while maintaining security and performance."}}
{"id": "2510.13755", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.13755", "abs": "https://arxiv.org/abs/2510.13755", "authors": ["Timoth\u00e9 Albouy", "Antonio Fern\u00e1ndez Anta", "Chryssis Georgiou", "Nicolas Nicolaou", "Junlang Wang"], "title": "Tight Conditions for Binary-Output Tasks under Crashes", "comment": null, "summary": "This paper explores necessary and sufficient system conditions to solve\ndistributed tasks with binary outputs (\\textit{i.e.}, tasks with output values\nin $\\{0,1\\}$). We focus on the distinct output sets of values a task can\nproduce (intentionally disregarding validity and value multiplicity),\nconsidering that some processes may output no value. In a distributed system\nwith $n$ processes, of which up to $t \\leq n$ can crash, we provide a complete\ncharacterization of the tight conditions on $n$ and $t$ under which every class\nof tasks with binary outputs is solvable, for both synchronous and asynchronous\nsystems. This output-set approach yields highly general results: it unifies\nmultiple distributed computing problems, such as binary consensus and symmetry\nbreaking, and it produces impossibility proofs that hold for stronger task\nformulations, including those that consider validity, account for value\nmultiplicity, or move beyond binary outputs.", "AI": {"tldr": "This paper provides complete characterization of tight conditions on n and t for solving all binary output tasks in distributed systems, unifying problems like consensus and symmetry breaking.", "motivation": "To explore necessary and sufficient system conditions for solving distributed tasks with binary outputs, focusing on output sets rather than validity or value multiplicity.", "method": "Using an output-set approach that disregards validity and value multiplicity, analyzing conditions under which every class of binary output tasks is solvable in both synchronous and asynchronous systems.", "result": "Complete characterization of tight conditions on n (number of processes) and t (number of crash failures) for solvability of all binary output task classes.", "conclusion": "The output-set approach yields highly general results that unify multiple distributed computing problems and produces impossibility proofs that hold for stronger task formulations."}}
