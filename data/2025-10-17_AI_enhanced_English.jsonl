{"id": "2510.14284", "categories": ["cs.PF", "math.PR"], "pdf": "https://arxiv.org/pdf/2510.14284", "abs": "https://arxiv.org/abs/2510.14284", "authors": ["Yishun Luo", "Martin Zubeldia"], "title": "Stability and Heavy-traffic Delay Optimality of General Load Balancing Policies in Heterogeneous Service Systems", "comment": null, "summary": "We consider a load balancing system consisting of $n$ single-server queues\nworking in parallel, with heterogeneous service rates. Jobs arrive to a central\ndispatcher, which has to dispatch them to one of the queues immediately upon\narrival. For this setting, we consider a broad family of policies where the\ndispatcher can only access the queue lengths sporadically, every $T$ units of\ntime. We assume that the dispatching decisions are made based only on the order\nof the scaled queue lengths at the last time that the queues were accessed, and\non the processing rate of each server. For these general policies, we provide\neasily verifiable necessary and sufficient conditions for the stability of the\nsystem, and sufficient conditions for heavy-traffic delay optimality. We also\nshow that, in heavy-traffic, the queue length converges in distribution to a\nscaled deterministic vector, where the scaling factor is an exponential random\nvariable.", "AI": {"tldr": "The paper analyzes load balancing with periodic queue length observations and heterogeneous servers, providing stability conditions and heavy-traffic delay optimality results.", "motivation": "To study load balancing systems where dispatchers can only access queue lengths periodically rather than continuously, which is more realistic for practical systems with limited communication capabilities.", "method": "The authors consider a family of policies where dispatchers access queue lengths every T time units and make dispatching decisions based on scaled queue length ordering and server processing rates.", "result": "The paper provides necessary and sufficient conditions for system stability and sufficient conditions for heavy-traffic delay optimality, showing that queue lengths converge to scaled deterministic vectors with exponential scaling factors.", "conclusion": "The proposed policies with periodic queue observations can achieve stability and delay optimality in heavy-traffic regimes, making them suitable for practical load balancing systems with limited communication resources."}}
{"id": "2510.14024", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14024", "abs": "https://arxiv.org/abs/2510.14024", "authors": ["Thanh Son Phung", "Douglas Thain"], "title": "Efficiently Executing High-throughput Lightweight LLM Inference Applications on Heterogeneous Opportunistic GPU Clusters with Pervasive Context Management", "comment": null, "summary": "The rise of Generative AI introduces a new class of HPC workloads that\nintegrates lightweight LLMs with traditional high-throughput applications to\naccelerate scientific discovery. The current design of HPC clusters is\ninadequate to support this new class however, either incurring long wait times\non static batch queues or repeatedly paying expensive LLM startup costs upon\nresource preemption. To circumvent both the long queues and high startup costs,\nwe propose to \"decouple\" the LLM initialization context from the actual LLM\ninferences, and retain the context in GPUs until it is no longer needed, a\ntechnique we term \"Pervasive Context Management\". We transform a fact\nverification application to enable this technique, allowing it to reduce its\nexecution time by 72.1% (from 3 hours to 48 minutes) using the same amount of\nGPUs, and scale opportunistically on 32.8% of all GPUs in the cluster and\nfurther reduce the execution time to 13 minutes.", "AI": {"tldr": "The paper proposes 'Pervasive Context Management' to decouple LLM initialization from inferences, reducing execution time by 72.1% and enabling opportunistic scaling on 32.8% of cluster GPUs.", "motivation": "Current HPC cluster designs are inadequate for Generative AI workloads, causing long wait times on batch queues or expensive LLM startup costs when resources are preempted.", "method": "Decouple LLM initialization context from actual inferences and retain the context in GPUs until no longer needed, using 'Pervasive Context Management' technique.", "result": "Reduced execution time by 72.1% (from 3 hours to 48 minutes) using same GPUs, and scaled opportunistically on 32.8% of cluster GPUs to further reduce execution time to 13 minutes.", "conclusion": "Pervasive Context Management effectively addresses the limitations of current HPC cluster designs for Generative AI workloads by eliminating long queues and high startup costs."}}
{"id": "2510.14172", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14172", "abs": "https://arxiv.org/abs/2510.14172", "authors": ["Yuchao Su", "Srikar Chundury", "Jiajia Li", "Frank Mueller"], "title": "DIAMOND: Systolic Array Acceleration of Sparse Matrix Multiplication for Quantum Simulation", "comment": null, "summary": "Hamiltonian simulation is a key workload in quantum computing, enabling the\nstudy of complex quantum systems and serving as a critical tool for classical\nverification of quantum devices. However, it is computationally challenging\nbecause the Hilbert space dimension grows exponentially with the number of\nqubits. The growing dimensions make matrix exponentiation, the key kernel in\nHamiltonian simulations, increasingly expensive. Matrix exponentiation is\ntypically approximated by the Taylor series, which contains a series of matrix\nmultiplications. Since Hermitian operators are often sparse, sparse matrix\nmultiplication accelerators are essential for improving the scalability of\nclassical Hamiltonian simulation. Yet, existing accelerators are primarily\ndesigned for machine learning workloads and tuned to their characteristic\nsparsity patterns, which differ fundamentally from those in Hamiltonian\nsimulations that are often dominated by structured diagonals.\n  In this work, we present \\name, the first diagonal-optimized quantum\nsimulation accelerator. It exploits the diagonal structure commonly found in\nproblem-Hamiltonian (Hermitian) matrices and leverages a restructured systolic\narray dataflow to transform diagonally sparse matrices into dense computations,\nenabling high utilization and performance. Through detailed cycle-level\nsimulation of diverse benchmarks in HamLib, \\name{} demonstrates average\nperformance improvements of $10.26\\times$, $33.58\\times$, and $53.15\\times$\nover SIGMA, Outer Product, and Gustavson's algorithm, respectively, with peak\nspeedups up to $127.03\\times$ while reducing energy consumption by an average\nof $471.55\\times$ and up to $4630.58\\times$ compared to SIGMA.", "AI": {"tldr": "\\name is a diagonal-optimized quantum simulation accelerator that exploits structured diagonal sparsity in Hamiltonian matrices to achieve significant performance improvements and energy savings over existing methods.", "motivation": "Hamiltonian simulation is computationally challenging due to exponential growth of Hilbert space with qubits. Existing sparse matrix accelerators are designed for ML workloads and don't optimize for the structured diagonal patterns common in Hamiltonian simulations.", "method": "\\name exploits diagonal structure in problem-Hamiltonian matrices and uses a restructured systolic array dataflow to transform diagonally sparse matrices into dense computations for high utilization and performance.", "result": "\\name demonstrates average performance improvements of 10.26\u00d7, 33.58\u00d7, and 53.15\u00d7 over SIGMA, Outer Product, and Gustavson's algorithm respectively, with peak speedups up to 127.03\u00d7. Energy consumption reduced by average 471.55\u00d7 and up to 4630.58\u00d7 compared to SIGMA.", "conclusion": "\\name is the first diagonal-optimized quantum simulation accelerator that effectively addresses the computational challenges of Hamiltonian simulation by leveraging structured diagonal sparsity patterns for significant performance and energy efficiency gains."}}
{"id": "2510.14050", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14050", "abs": "https://arxiv.org/abs/2510.14050", "authors": ["Michael Mandulak", "Sayan Ghosh", "S M Ferdous", "Mahantesh Halappanavar", "George Slota"], "title": "Anonymized Network Sensing using C++26 std::execution on GPUs", "comment": null, "summary": "Large-scale network sensing plays a vital role in network traffic analysis\nand characterization. As network packet data grows increasingly large, parallel\nmethods have become mainstream for network analytics. While effective,\nGPU-based implementations still face start-up challenges in host-device memory\nmanagement and porting complex workloads on devices, among others. To mitigate\nthese challenges, composable frameworks have emerged using modern C++\nprogramming language, for efficiently deploying analytics tasks on GPUs.\nSpecifically, the recent C++26 Senders model of asynchronous data operation\nchaining provides a simple interface for bulk pushing tasks to varied device\nexecution contexts.\n  Considering the prominence of contemporary dense-GPU platforms and\nvendor-leveraged software libraries, such a programming model consider GPUs as\nfirst-class execution resources (compared to traditional host-centric\nprogramming models), allowing convenient development of multi-GPU application\nworkloads via expressive and standardized asynchronous semantics. In this\npaper, we discuss practical aspects of developing the Anonymized Network\nSensing Graph Challenge on dense-GPU systems using the recently proposed C++26\nSenders model. Adopting a generic and productive programming model does not\nnecessarily impact the critical-path performance (as compared to low-level\nproprietary vendor-based programming models): our commodity library-based\nimplementation achieves up to 55x performance improvements on 8x NVIDIA A100\nGPUs as compared to the reference serial GraphBLAS baseline.", "AI": {"tldr": "This paper presents a composable framework using C++26 Senders model for efficient network sensing analytics on dense-GPU systems, achieving significant performance improvements over traditional approaches.", "motivation": "Large-scale network sensing requires parallel methods due to growing packet data, but GPU implementations face challenges with memory management and porting complex workloads. Composable frameworks using modern C++ can mitigate these issues.", "method": "Uses the C++26 Senders model for asynchronous data operation chaining, treating GPUs as first-class execution resources. Implements the Anonymized Network Sensing Graph Challenge on dense-GPU systems with a commodity library-based approach.", "result": "Achieves up to 55x performance improvements on 8x NVIDIA A100 GPUs compared to the reference serial GraphBLAS baseline, demonstrating that productive programming models don't compromise performance.", "conclusion": "The C++26 Senders model provides an effective approach for developing multi-GPU network analytics workloads with standardized asynchronous semantics, delivering substantial performance gains while maintaining programming productivity."}}
{"id": "2510.14379", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14379", "abs": "https://arxiv.org/abs/2510.14379", "authors": ["Ming-Han Lin", "Tian-Sheuan Chang"], "title": "Computing-In-Memory Aware Model Adaption For Edge Devices", "comment": "9 pages", "summary": "Computing-in-Memory (CIM) macros have gained popularity for deep learning\nacceleration due to their highly parallel computation and low power\nconsumption. However, limited macro size and ADC precision introduce throughput\nand accuracy bottlenecks. This paper proposes a two-stage CIM-aware model\nadaptation process. The first stage compresses the model and reallocates\nresources based on layer importance and macro size constraints, reducing model\nweight loading latency while improving resource utilization and maintaining\naccuracy. The second stage performs quantization-aware training, incorporating\npartial sum quantization and ADC precision to mitigate quantization errors in\ninference. The proposed approach enhances CIM array utilization to 90\\%,\nenables concurrent activation of up to 256 word lines, and achieves up to 93\\%\ncompression, all while preserving accuracy comparable to previous methods.", "AI": {"tldr": "A two-stage CIM-aware model adaptation process that compresses models, reallocates resources based on layer importance, and performs quantization-aware training to overcome throughput and accuracy bottlenecks in Computing-in-Memory macros for deep learning acceleration.", "motivation": "To address the throughput and accuracy limitations caused by limited macro size and ADC precision in Computing-in-Memory (CIM) macros for deep learning acceleration, while maintaining high parallel computation and low power consumption benefits.", "method": "Two-stage approach: 1) Model compression and resource reallocation based on layer importance and macro size constraints to reduce weight loading latency and improve resource utilization; 2) Quantization-aware training incorporating partial sum quantization and ADC precision to mitigate quantization errors.", "result": "Achieves 90% CIM array utilization, enables concurrent activation of up to 256 word lines, achieves up to 93% compression, while maintaining accuracy comparable to previous methods.", "conclusion": "The proposed CIM-aware model adaptation effectively overcomes throughput and accuracy bottlenecks in CIM macros, significantly improving resource utilization and compression rates while preserving model accuracy."}}
{"id": "2510.14126", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14126", "abs": "https://arxiv.org/abs/2510.14126", "authors": ["Nikos Pagonas", "Yeounoh Chung", "Kostis Kaffes", "Arvind Krishnamurthy"], "title": "Cortex: Workflow-Aware Resource Pooling and Scheduling for Agentic Serving", "comment": null, "summary": "We introduce Cortex, a prototype workflow-aware serving platform designed for\nagentic workloads. The core principle of Cortex is stage isolation: it\nprovisions dedicated resource pools for each distinct stage of an agentic\nworkflow. This simple yet powerful strategy mitigates inter-stage interference\nin compute and memory, leading to better KV cache utilization, higher\nthroughput, and more predictable performance. By customizing resource\nallocation and scheduling within each distinct stage of agentic workflows,\nCortex lays the groundwork for more advanced, agent-native serving paradigms,\nincluding malleable resource management, speculative execution of workflow\nbranches, and a shared, multi-tiered cache for \"agentic state.\"", "AI": {"tldr": "Cortex is a workflow-aware serving platform for agentic workloads that uses stage isolation to provision dedicated resource pools for each workflow stage, improving performance and enabling advanced serving features.", "motivation": "To address inter-stage interference in agentic workflows and improve KV cache utilization, throughput, and performance predictability.", "method": "Uses stage isolation by provisioning dedicated resource pools for each distinct stage of agentic workflows, with customized resource allocation and scheduling per stage.", "result": "Mitigates inter-stage interference in compute and memory, leading to better KV cache utilization, higher throughput, and more predictable performance.", "conclusion": "Cortex provides a foundation for advanced agent-native serving paradigms including malleable resource management, speculative execution of workflow branches, and shared multi-tiered caching for agentic state."}}
{"id": "2510.14147", "categories": ["cs.DC", "cs.CG", "cs.DS"], "pdf": "https://arxiv.org/pdf/2510.14147", "abs": "https://arxiv.org/abs/2510.14147", "authors": ["Gabriel Raulet", "Dmitriy Morozov", "Aydin Buluc", "Katherine Yelick"], "title": "Distributed-Memory Parallel Algorithms for Fixed-Radius Near Neighbor Graph Construction", "comment": "11 pages, 5 figures, 3 tables", "summary": "Computing fixed-radius near-neighbor graphs is an important first step for\nmany data analysis algorithms. Near-neighbor graphs connect points that are\nclose under some metric, endowing point clouds with a combinatorial structure.\nAs computing power and data acquisition methods advance, diverse sources of\nlarge scientific datasets would greatly benefit from scalable solutions to this\ncommon subroutine for downstream analysis. Prior work on parallel nearest\nneighbors has made great progress in problems like k-nearest and approximate\nnearest neighbor search problems, with particular attention on Euclidean\nspaces. Yet many applications need exact solutions and non-Euclidean metrics.\nThis paper presents a scalable sparsity-aware distributed memory algorithm\nusing cover trees to compute near-neighbor graphs in general metric spaces. We\nprovide a shared-memory algorithm for cover tree construction and demonstrate\nits competitiveness with state-of-the-art fixed-radius search data structures.\nWe then introduce two distributed-memory algorithms for the near-neighbor graph\nproblem, a simple point-partitioning strategy and a spatial-partitioning\nstrategy, which leverage the cover tree algorithm on each node. Our algorithms\nexhibit parallel scaling across a variety of real and synthetic datasets for\nboth traditional and non-traditional metrics. On real world high dimensional\ndatasets with one million points, we achieve speedups up to 678.34x over the\nstate-of-the-art using 1024 cores for graphs with 70 neighbors per vertex (on\naverage), and up to 1590.99x using 4096 cores for graphs with 500 neighbors per\nvertex (on average).", "AI": {"tldr": "This paper presents scalable distributed memory algorithms for computing fixed-radius near-neighbor graphs in general metric spaces using cover trees, achieving significant speedups over state-of-the-art methods.", "motivation": "Many data analysis algorithms require fixed-radius near-neighbor graphs as a first step, but existing parallel solutions focus mainly on Euclidean spaces and approximate methods, while many applications need exact solutions with non-Euclidean metrics.", "method": "The authors develop a shared-memory algorithm for cover tree construction and two distributed-memory algorithms: a simple point-partitioning strategy and a spatial-partitioning strategy, both leveraging the cover tree algorithm on each node.", "result": "The algorithms show excellent parallel scaling across various datasets and metrics, achieving speedups up to 678.34x with 1024 cores for graphs with 70 neighbors per vertex, and up to 1590.99x with 4096 cores for graphs with 500 neighbors per vertex.", "conclusion": "The proposed scalable sparsity-aware distributed memory algorithms using cover trees effectively compute near-neighbor graphs in general metric spaces, providing significant performance improvements over existing methods."}}
{"id": "2510.14750", "categories": ["cs.AR", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.14750", "abs": "https://arxiv.org/abs/2510.14750", "authors": ["\u0130smail Emir Y\u00fcksel", "Ataberk Olgun", "F. Nisa Bostanc\u0131", "Haocong Luo", "A. Giray Ya\u011fl\u0131k\u00e7\u0131", "Onur Mutlu"], "title": "ColumnDisturb: Understanding Column-based Read Disturbance in Real DRAM Chips and Implications for Future Systems", "comment": "Extended version of our publication at the 58th IEEE/ACM\n  International Symposium on Microarchitecture (MICRO-58), 2025", "summary": "We experimentally demonstrate a new widespread read disturbance phenomenon,\nColumnDisturb, in real commodity DRAM chips. By repeatedly opening or keeping a\nDRAM row (aggressor row) open, we show that it is possible to disturb DRAM\ncells through a DRAM column (i.e., bitline) and induce bitflips in DRAM cells\nsharing the same columns as the aggressor row (across multiple DRAM subarrays).\nWith ColumnDisturb, the activation of a single row concurrently disturbs cells\nacross as many as three subarrays (e.g., 3072 rows) as opposed to\nRowHammer/RowPress, which affect only a few neighboring rows of the aggressor\nrow in a single subarray. We rigorously characterize ColumnDisturb and its\ncharacteristics under various operational conditions using 216 DDR4 and 4 HBM2\nchips from three major manufacturers. Among our 27 key experimental\nobservations, we highlight two major results and their implications.\n  First, ColumnDisturb affects chips from all three major manufacturers and\nworsens as DRAM technology scales down to smaller node sizes (e.g., the minimum\ntime to induce the first ColumnDisturb bitflip reduces by up to 5.06x). We\nobserve that, in existing DRAM chips, ColumnDisturb induces bitflips within a\nstandard DDR4 refresh window (e.g., in 63.6 ms) in multiple cells. We predict\nthat, as DRAM technology node size reduces, ColumnDisturb would worsen in\nfuture DRAM chips, likely causing many more bitflips in the standard refresh\nwindow. Second, ColumnDisturb induces bitflips in many (up to 198x) more rows\nthan retention failures. Therefore, ColumnDisturb has strong implications for\nretention-aware refresh mechanisms that leverage the heterogeneity in cell\nretention times: our detailed analyses show that ColumnDisturb greatly reduces\nthe benefits of such mechanisms.", "AI": {"tldr": "Researchers discovered ColumnDisturb, a new DRAM read disturbance phenomenon where activating a single row can disturb cells across multiple subarrays through bitlines, affecting up to 3072 rows and causing bitflips within standard refresh windows.", "motivation": "To identify and characterize a new widespread read disturbance phenomenon in commodity DRAM chips that affects more rows than traditional RowHammer/RowPress and has implications for DRAM reliability and refresh mechanisms.", "method": "Experimental demonstration using 216 DDR4 and 4 HBM2 chips from three major manufacturers, rigorously characterizing ColumnDisturb under various operational conditions with 27 key experimental observations.", "result": "ColumnDisturb affects all three manufacturers, worsens with technology scaling (5.06x reduction in time to first bitflip), causes bitflips within standard 63.6ms refresh windows, and affects up to 198x more rows than retention failures.", "conclusion": "ColumnDisturb poses significant reliability challenges for current and future DRAM chips, greatly reducing the effectiveness of retention-aware refresh mechanisms and requiring new mitigation strategies as technology scales down."}}
{"id": "2510.14151", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14151", "abs": "https://arxiv.org/abs/2510.14151", "authors": ["Saeed Moradi", "Koosha Esmaeilzadeh Khorasani", "Sara Rouhani"], "title": "Privacy-Preserving and Incentive-Driven Relay-Based Framework for Cross-Domain Blockchain Interoperability", "comment": null, "summary": "Interoperability is essential for transforming blockchains from isolated\nnetworks into collaborative ecosystems, unlocking their full potential. While\nsignificant progress has been made in public blockchain interoperability,\nbridging permissioned and permissionless blockchains poses unique challenges\ndue to differences in access control, architectures, and security requirements.\nThis paper introduces a blockchain-agnostic framework to enable\ninteroperability between permissioned and permissionless networks. Leveraging\ncryptographic techniques, the framework ensures secure data exchanges. Its\nlightweight architectural design simplifies implementation and maintenance,\nwhile the integration of Clover and Dandelion++ protocols enhances transaction\nanonymity. Performance evaluations demonstrate the framework's effectiveness in\nachieving secure and efficient interoperability by measuring the forwarding\ntime, the throughput, the availability, and their collusion impact of the\nsystem across heterogeneous blockchain ecosystems.", "AI": {"tldr": "A blockchain-agnostic framework for interoperability between permissioned and permissionless networks using cryptographic techniques and lightweight architecture with enhanced transaction anonymity.", "motivation": "To address the unique challenges in bridging permissioned and permissionless blockchains due to differences in access control, architectures, and security requirements, enabling collaborative ecosystems.", "method": "Leverages cryptographic techniques for secure data exchanges, lightweight architectural design for simplified implementation, and integrates Clover and Dandelion++ protocols for enhanced transaction anonymity.", "result": "Performance evaluations demonstrate effectiveness in achieving secure and efficient interoperability by measuring forwarding time, throughput, availability, and collusion impact across heterogeneous blockchain ecosystems.", "conclusion": "The framework successfully enables interoperability between permissioned and permissionless blockchains through secure data exchanges, simplified implementation, and enhanced transaction anonymity."}}
{"id": "2510.14730", "categories": ["cs.DC", "cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14730", "abs": "https://arxiv.org/abs/2510.14730", "authors": ["Alejandro Cano", "Crist\u00f3bal Camarero", "Carmen Mart\u00ednez", "Ram\u00f3n Beivide"], "title": "Deadlock-free routing for Full-mesh networks without using Virtual Channels", "comment": null, "summary": "High-radix, low-diameter networks like HyperX and Dragonfly use a Full-mesh\ncore, and rely on multiple virtual channels (VCs) to avoid packet deadlocks in\nadaptive routing. However, VCs introduce significant overhead in the switch in\nterms of area, power, and design complexity, limiting the switch scalability.\nThis paper starts by revisiting VC-less routing through link ordering schemes\nin Full-mesh networks, which offer implementation simplicity but suffer from\nperformance degradation under adversarial traffic. Thus, to overcome these\nchallenges, we propose TERA (Topology-Embedded Routing Algorithm), a novel\nrouting algorithm which employs an embedded physical subnetwork to provide\ndeadlock-free non-minimal paths without using VCs.\n  In a Full-mesh network, TERA outperforms link ordering routing algorithms by\n80% when dealing with adversarial traffic, and up to 100% in application\nkernels. Furthermore, compared to other VC-based approaches, it reduces buffer\nrequirements by 50%, while maintaining comparable latency and throughput.\nLastly, early results from a 2D-HyperX evaluation show that TERA outperforms\nstate-of-the-art algorithms that use the same number of VCs, achieving\nperformance improvements of up to 32%.", "AI": {"tldr": "TERA is a novel routing algorithm that uses an embedded physical subnetwork to provide deadlock-free non-minimal paths without virtual channels, outperforming existing approaches in Full-mesh networks.", "motivation": "Virtual channels (VCs) in high-radix networks introduce significant overhead in switch area, power, and complexity, limiting scalability. Existing VC-less routing through link ordering suffers from performance degradation under adversarial traffic.", "method": "Proposes TERA (Topology-Embedded Routing Algorithm) which employs an embedded physical subnetwork to provide deadlock-free non-minimal paths without using virtual channels.", "result": "In Full-mesh networks, TERA outperforms link ordering by 80% under adversarial traffic and up to 100% in application kernels. Reduces buffer requirements by 50% compared to VC-based approaches while maintaining comparable latency and throughput. In 2D-HyperX, achieves up to 32% performance improvement over state-of-the-art algorithms using same VCs.", "conclusion": "TERA provides an effective solution for deadlock-free routing in high-radix networks without the overhead of virtual channels, offering significant performance improvements and reduced buffer requirements."}}
{"id": "2510.14186", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14186", "abs": "https://arxiv.org/abs/2510.14186", "authors": ["Pengkun Ren", "Hai Dong", "Nasrin Sohrabi", "Zahir Tari", "Pengcheng Zhang"], "title": "Proof-Carrying Fair Ordering: Asymmetric Verification for BFT via Incremental Graphs", "comment": "18 pages, 4 figures", "summary": "Byzantine Fault-Tolerant (BFT) consensus protocols ensure agreement on\ntransaction ordering despite malicious actors, but unconstrained ordering power\nenables sophisticated value extraction attacks like front running and sandwich\nattacks - a critical threat to blockchain systems. Order-fair consensus curbs\nadversarial value extraction by constraining how leaders may order\ntransactions. While state-of-the-art protocols such as Themis attain strong\nguarantees through graph-based ordering, they ask every replica to re-run the\nleader's expensive ordering computation for validation - an inherently\nsymmetric and redundant paradigm. We present AUTIG, a high-performance,\npluggable order-fairness service that breaks this symmetry. Our key insight is\nthat verifying a fair order does not require re-computing it. Instead,\nverification can be reduced to a stateless audit of succinct, verifiable\nassertions about the ordering graph's properties. AUTIG realizes this via an\nasymmetric architecture: the leader maintains a persistent\nUnconfirmed-Transaction Incremental Graph (UTIG) to amortize graph construction\nacross rounds and emits a structured proof of fairness with each proposal;\nfollowers validate the proof without maintaining historical state. AUTIG\nintroduces three critical innovations: (i) incremental graph maintenance driven\nby threshold-crossing events and state changes; (ii) a decoupled pipeline that\noverlaps leader-side collection/update/extraction with follower-side stateless\nverification; and (iii) a proof design covering all internal pairs in the\nfinalized prefix plus a frontier completeness check to rule out hidden external\ndependencies. We implement AUTIG and evaluate it against symmetric graph-based\nbaselines under partial synchrony. Experiments show higher throughput and lower\nend-to-end latency while preserving gamma-batch-order-fairness.", "AI": {"tldr": "AUTIG is an asymmetric order-fair consensus protocol that verifies fair transaction ordering without recomputing the ordering graph, achieving higher performance than symmetric approaches while maintaining fairness guarantees.", "motivation": "Existing BFT consensus protocols like Themis require every replica to re-run the leader's expensive graph-based ordering computation, creating symmetric and redundant work that limits performance.", "method": "AUTIG uses an asymmetric architecture where the leader maintains a persistent Unconfirmed-Transaction Incremental Graph (UTIG) and emits verifiable proofs of fairness, while followers validate proofs without maintaining historical state. Key innovations include incremental graph maintenance, decoupled pipelines, and proof designs covering internal pairs and frontier completeness.", "result": "Experiments show AUTIG achieves higher throughput and lower end-to-end latency compared to symmetric graph-based baselines while preserving gamma-batch-order-fairness under partial synchrony.", "conclusion": "AUTIG demonstrates that verifying fair order doesn't require recomputing it, enabling high-performance order-fair consensus through asymmetric verification of succinct proofs rather than symmetric recomputation."}}
{"id": "2510.14580", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14580", "abs": "https://arxiv.org/abs/2510.14580", "authors": ["Hyein Woo", "Miryeong Kwon", "Jiseon Kim", "Eunjee Na", "Hanjin Choi", "Seonghyeon Jang", "Myoungsoo Jung"], "title": "ScalePool: Hybrid XLink-CXL Fabric for Composable Resource Disaggregation in Unified Scale-up Domains", "comment": null, "summary": "This paper proposes ScalePool, a novel cluster architecture designed to\ninterconnect numerous accelerators using unified hardware interconnects rather\nthan traditional long-distance networking. ScalePool integrates\nAccelerator-Centric Links (XLink) and Compute Express Link (CXL) into a unified\nXLink-CXL hybrid fabric. Specifically, ScalePool employs XLink for\nintra-cluster, low-latency accelerator communication, while using hierarchical\nCXL-based switching fabrics for scalable and coherent inter-cluster memory\nsharing. By abstracting interfaces through CXL, ScalePool structurally resolves\ninteroperability constraints, enabling heterogeneous cluster operation and\ncomposable resource disaggregation. In addition, ScalePool introduces explicit\nmemory tiering: the latency-critical tier-1 combines accelerator-local memory\nwith coherence-centric CXL and XLink, whereas the highcapacity tier-2 employs\ndedicated memory nodes interconnected by a CXL-based fabric, achieving scalable\nand efficient memory pooling. Evaluation results show that ScalePool\naccelerates LLM training by 1.22x on average and up to 1.84x compared to\nconventional RDMA-based environments. Furthermore, the proposed tier-2 memory\ndisaggregation strategy reduces latency by up to 4.5x for memory-intensive\nworkloads.", "AI": {"tldr": "ScalePool is a novel cluster architecture that uses unified hardware interconnects (XLink and CXL) instead of traditional networking to connect accelerators, featuring explicit memory tiering and achieving significant performance improvements for LLM training and memory-intensive workloads.", "motivation": "To overcome limitations of traditional long-distance networking for accelerator interconnection and address interoperability constraints in heterogeneous clusters, while enabling scalable and coherent memory sharing across clusters.", "method": "Integrates Accelerator-Centric Links (XLink) for intra-cluster low-latency communication and hierarchical CXL-based switching fabrics for inter-cluster memory sharing. Uses explicit memory tiering with tier-1 for latency-critical operations and tier-2 for high-capacity memory pooling.", "result": "Accelerates LLM training by 1.22x on average and up to 1.84x compared to conventional RDMA-based environments. Reduces latency by up to 4.5x for memory-intensive workloads through tier-2 memory disaggregation.", "conclusion": "ScalePool successfully addresses accelerator interconnection challenges through unified hardware interconnects and memory tiering, demonstrating significant performance improvements for modern AI workloads like LLM training."}}
{"id": "2510.14599", "categories": ["cs.DC", "D.4.1; C.4; C.1.4; D.1.3"], "pdf": "https://arxiv.org/pdf/2510.14599", "abs": "https://arxiv.org/abs/2510.14599", "authors": ["Michal Konopa", "Jan Fesl", "Ladislav Ber \u00e1nek"], "title": "JASDA: Introducing Job-Aware Scheduling in Scheduler-Driven Job Atomization", "comment": "25 pages", "summary": "The increasing complexity and temporal variability of workloads on\nMIG-enabled GPUs challenge the scalability of traditional centralized\nscheduling. Building upon the SJA concept, this paper introduces JASDA-a novel\nparadigm that extends SJA from a largely centralized scheduling model toward a\nfully decentralized negotiation process. In JASDA, jobs actively generate and\nscore feasible subjobs in response to scheduler-announced execution windows,\nwhile the scheduler performs policy-driven clearing that balances utilization,\nfairness, and temporal responsiveness. This bidirectional, iterative\ninteraction embeds feedback, calibration, and probabilistic safety directly\ninto the scheduling loop, enabling adaptive and transparent decision-making. By\ncoupling principles from auction theory and online optimization with the\ntemporal granularity of GPU workloads, JASDA provides a scalable foundation for\nmarket-aware and fairness-driven resource management-bridging theoretical\nscheduling models with practical deployment in modern MIG-enabled environments\nrelevant to Artificial Intelligence and Agriculture 4.0.", "AI": {"tldr": "JASDA extends SJA from centralized to decentralized scheduling using auction theory and online optimization for MIG-enabled GPUs, enabling adaptive resource management through bidirectional job-scheduler negotiation.", "motivation": "Traditional centralized scheduling struggles with complex, variable workloads on MIG-enabled GPUs, requiring more scalable approaches that can handle temporal variability and maintain fairness.", "method": "Jobs generate and score feasible subjobs in response to scheduler-announced execution windows, while scheduler performs policy-driven clearing balancing utilization, fairness, and responsiveness through bidirectional iterative interaction.", "result": "JASDA embeds feedback, calibration, and probabilistic safety directly into scheduling loop, enabling adaptive and transparent decision-making for scalable resource management.", "conclusion": "JASDA provides a scalable foundation bridging theoretical scheduling models with practical deployment in modern MIG-enabled environments, particularly relevant to AI and Agriculture 4.0 applications."}}
{"id": "2510.14622", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14622", "abs": "https://arxiv.org/abs/2510.14622", "authors": ["Miryeong Kwon", "Donghyun Gouk", "Hyein Woo", "Junhee Kim", "Jinwoo Baek", "Kyungkuk Nam", "Sangyoon Ji", "Jiseon Kim", "Hanyeoreum Bae", "Junhyeok Jang", "Hyunwoo You", "Junseok Moon", "Myoungsoo Jung"], "title": "MPI-over-CXL: Enhancing Communication Efficiency in Distributed HPC Systems", "comment": null, "summary": "MPI implementations commonly rely on explicit memory-copy operations,\nincurring overhead from redundant data movement and buffer management. This\noverhead notably impacts HPC workloads involving intensive inter-processor\ncommunication. In response, we introduce MPI-over-CXL, a novel MPI\ncommunication paradigm leveraging CXL, which provides cache-coherent shared\nmemory across multiple hosts. MPI-over-CXL replaces traditional data-copy\nmethods with direct shared memory access, significantly reducing communication\nlatency and memory bandwidth usage. By mapping shared memory regions directly\ninto the virtual address spaces of MPI processes, our design enables efficient\npointer-based communication, eliminating redundant copying operations. To\nvalidate this approach, we implement a comprehensive hardware and software\nenvironment, including a custom CXL 3.2 controller, FPGA-based multi-host\nemulation, and dedicated software stack. Our evaluations using representative\nbenchmarks demonstrate substantial performance improvements over conventional\nMPI systems, underscoring MPI-over-CXL's potential to enhance efficiency and\nscalability in large-scale HPC environments.", "AI": {"tldr": "MPI-over-CXL replaces traditional data copying in MPI implementations with direct shared memory access using CXL technology, reducing communication overhead in HPC workloads.", "motivation": "Traditional MPI implementations suffer from overhead due to redundant data movement and buffer management through explicit memory-copy operations, which significantly impacts HPC workloads with intensive inter-processor communication.", "method": "Developed MPI-over-CXL that leverages CXL's cache-coherent shared memory across multiple hosts, replacing data-copy methods with direct shared memory access. Implemented custom CXL 3.2 controller, FPGA-based multi-host emulation, and dedicated software stack to map shared memory regions directly into MPI processes' virtual address spaces for pointer-based communication.", "result": "Evaluations using representative benchmarks demonstrated substantial performance improvements over conventional MPI systems, with significant reductions in communication latency and memory bandwidth usage.", "conclusion": "MPI-over-CXL shows potential to enhance efficiency and scalability in large-scale HPC environments by eliminating redundant copying operations through direct shared memory access."}}
{"id": "2510.14686", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.14686", "abs": "https://arxiv.org/abs/2510.14686", "authors": ["Tongxuan Liu", "Tao Peng", "Peijun Yang", "Xiaoyang Zhao", "Xiusheng Lu", "Weizhe Huang", "Zirui Liu", "Xiaoyu Chen", "Zhiwei Liang", "Jun Xiong", "Donghe Jin", "Minchao Zhang", "Jinrong Guo", "Yingxu Deng", "Xu Zhang", "Xianzhe Dong", "Siqi Wang", "Siyu Wu", "Yu Wu", "Zihan Tang", "Yuting Zeng", "Yanshu Wang", "Jinguang Liu", "Meng Kang", "Menxin Li", "Yunlong Wang", "Yiming Liu", "Xiaolong Ma", "Yifan Wang", "Yichen Zhang", "Jinrun Yin", "Keyang Zheng", "Jiawei Yin", "Jun Zhang", "Ziyue Wang", "Xiaobo Lin", "Liangyu Liu", "Liwei Lan", "Yang Liu", "Chunhua Peng", "Han Liu", "Songcheng Ren", "Xuezhu Wang", "Yunheng Shen", "Yi Wang", "Guyue Liu", "Hui Chen", "Tong Yang", "Hailong Yang", "Jing Li", "Guiguang Ding", "Ke Zhang"], "title": "xLLM Technical Report", "comment": "39 pages", "summary": "We introduce xLLM, an intelligent and efficient Large Language Model (LLM)\ninference framework designed for high-performance, large-scale enterprise-grade\nserving, with deep optimizations for diverse AI accelerators. To address these\nchallenges, xLLM builds a novel decoupled service-engine architecture. At the\nservice layer, xLLM-Service features an intelligent scheduling module that\nefficiently processes multimodal requests and co-locates online and offline\ntasks through unified elastic scheduling to maximize cluster utilization. This\nmodule also relies on a workload-adaptive dynamic Prefill-Decode (PD)\ndisaggregation policy and a novel Encode-Prefill-Decode (EPD) disaggregation\npolicy designed for multimodal inputs. Furthermore, it incorporates a\ndistributed architecture to provide global KV Cache management and robust\nfault-tolerant capabilities for high availability. At the engine layer,\nxLLM-Engine co-optimizes system and algorithm designs to fully saturate\ncomputing resources. This is achieved through comprehensive multi-layer\nexecution pipeline optimizations, an adaptive graph mode and an xTensor memory\nmanagement. xLLM-Engine also further integrates algorithmic enhancements such\nas optimized speculative decoding and dynamic EPLB, collectively serving to\nsubstantially boost throughput and inference efficiency. Extensive evaluations\ndemonstrate that xLLM delivers significantly superior performance and resource\nefficiency. Under identical TPOT constraints, xLLM achieves throughput up to\n1.7x that of MindIE and 2.2x that of vLLM-Ascend with Qwen-series models, while\nmaintaining an average throughput of 1.7x that of MindIE with Deepseek-series\nmodels. xLLM framework is publicly available at\nhttps://github.com/jd-opensource/xllm and\nhttps://github.com/jd-opensource/xllm-service.", "AI": {"tldr": "xLLM is an efficient LLM inference framework with a decoupled service-engine architecture that optimizes scheduling, KV cache management, and computational efficiency for high-performance enterprise serving.", "motivation": "To address the challenges of high-performance, large-scale enterprise-grade LLM serving with deep optimizations for diverse AI accelerators.", "method": "Builds a decoupled service-engine architecture with intelligent scheduling, workload-adaptive dynamic Prefill-Decode disaggregation, Encode-Prefill-Decode policy for multimodal inputs, distributed KV Cache management, multi-layer execution pipeline optimizations, adaptive graph mode, and xTensor memory management.", "result": "Achieves throughput up to 1.7x that of MindIE and 2.2x that of vLLM-Ascend with Qwen-series models, while maintaining average throughput of 1.7x that of MindIE with Deepseek-series models under identical TPOT constraints.", "conclusion": "xLLM delivers significantly superior performance and resource efficiency for large-scale LLM inference serving and is publicly available as an open-source framework."}}
{"id": "2510.14798", "categories": ["cs.DC", "cs.DS", "math.PR"], "pdf": "https://arxiv.org/pdf/2510.14798", "abs": "https://arxiv.org/abs/2510.14798", "authors": ["Petra Berenbrink", "Tom Friedetzky", "Peter Kling", "Lars Nagel"], "title": "Balls and Bins and the Infinite Process with Random Deletions", "comment": null, "summary": "We consider an infinite balls-into-bins process with deletions where in each\ndiscrete step $t$ a coin is tossed as to whether, with probability $\\beta(t)\n\\in (0,1)$, a new ball is allocated using the Greedy[2] strategy (which places\nthe ball in the lower loaded of two bins sampled uniformly at random) or, with\nremaining probability $1-\\beta(t)$, a ball is deleted from a non-empty bin\nchosen uniformly at random. Let $n$ be the number of bins and $m(t)$ the total\nload at time $t$. We are interested in bounding the discrepancy $x_{\\max}(t) -\nm(t)/n$ (current maximum load relative to current average) and the overload\n$x_{\\max}(t) - m_{\\max}(t)/n$ (current maximum load relative to highest average\nobserved so far).\n  We prove that at an arbitrarily chosen time $t$ the total number of balls\nabove the average is $O(n)$ and that the discrepancy is $ O(\\log(n))$. For the\ndiscrepancy, we provide a matching lower bound. Furthermore we prove that at an\narbitrarily chosen time $t$ the overload is $\\log\\log(n)+O(1)$. For \"good\"\ninsertion probability sequences (in which the average load of time intervals\nwith polynomial length increases in expectation) we show that even the\ndiscrepancy is bounded by $\\log\\log(n)+O(1)$.\n  One of our main analytical tools is a layered induction, as per [ABKU99].\nSince our model allows for rather more general scenarios than what was\npreviously considered, the formal analysis requires some extra ingredients as\nwell, in particular a detailed potential analysis. Furthermore, we simplify the\nsetup by applying probabilistic couplings to obtain certain \"recovery\"\nproperties, which eliminate much of the need for intricate and careful\nconditioning elsewhere in the analysis.", "AI": {"tldr": "This paper analyzes an infinite balls-into-bins process with deletions using Greedy[2] allocation. It provides bounds on discrepancy and overload metrics, showing O(n) balls above average, O(log(n)) discrepancy with matching lower bound, and loglog(n)+O(1) overload.", "motivation": "To understand load balancing dynamics in systems with both insertions and deletions, particularly bounding the gap between maximum load and average load under stochastic processes.", "method": "Uses layered induction analysis from previous work, detailed potential analysis, and probabilistic couplings to simplify conditioning. Considers Greedy[2] allocation strategy with random deletions.", "result": "Proves that at any time t: total balls above average is O(n), discrepancy is O(log(n)) with matching lower bound, and overload is loglog(n)+O(1). For 'good' insertion sequences, discrepancy reduces to loglog(n)+O(1).", "conclusion": "The analysis provides tight bounds for load balancing in dynamic systems with insertions and deletions, showing logarithmic or doubly logarithmic bounds depending on the metric and insertion patterns."}}
