{"id": "2510.15237", "categories": ["cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15237", "abs": "https://arxiv.org/abs/2510.15237", "authors": ["Yee Lam Elim Thompson", "Jonathan Fergus", "Jonathan Chung", "Jana G. Delfino", "Weijie Chen", "Gary M. Levine", "Frank W. Samuelson"], "title": "Impact of AI-Triage on Radiologist Report Turnaround Time: Real-World Time-Savings and Insights from Model Predictions", "comment": null, "summary": "Objective: To quantify the impact of workflow parameters on time-savings in\nreport turnaround time (TAT) due to an AI-triage device that prioritized\npulmonary embolism (PE) in chest CT pulmonary angiography (CTPA) exams.\nMethods: This retrospective study analyzed 11252 adult CTPA exams conducted for\nsuspected PE at a single tertiary academic medical center. Data was divided\ninto two periods: pre-AI and post-AI. For PE-positive exams, TAT - defined as\nthe duration from patient scan completion to the first preliminary report\ncompletion - was compared between the two periods. Time-savings were reported\nseparately for work-hour and off-hour cohorts. To characterize radiologist\nworkflow, 527234 records were retrieved from the PACS and workflow parameters\nsuch as exam inter-arrival time and radiologist read-time extracted. These\nparameters were input into a computational model to predict time-savings\nfollowing deployment of an AI-triage device and to study the impact of workflow\nparameters. Results: The pre-AI dataset included 4694 chest CTPA exams with\n13.3% being PE-positive. The post-AI dataset comprised 6558 exams with 16.2%\nbeing PE-positive. The mean TAT for pre-AI and post-AI during work hours are\n68.9 [95% CI\" 55.0, 82.8] and 46.7 [38.1, 55.2] minutes respectively, and those\nduring off-hours are 44.8 [33.7, 55.9] and 42.0 [33.6, 50.3] minutes.\nClinically-observed time-savings during work hours (22.2 [95% CI: 5.85, 38.6]\nminutes) were significant (p=0.004), while off-hour (2.82 [-11.1, 16.7]\nminutes) were not (p=0.345). Observed time-savings aligned with model\npredictions (29.6 [95% range: 23.2, 38.1] minutes for work hours; 2.10 [1.76,\n2.58] minutes for off-hours). Discussion: Consideration and quantification of\nclinical workflow contribute to an accurate assessment of the expected\ntime-savings in TAT following deployment of an AI-triage device.", "AI": {"tldr": "AI triage device for pulmonary embolism in CT scans significantly reduced report turnaround time during work hours by 22.2 minutes, with minimal impact during off-hours. Workflow analysis showed computational model accurately predicted time-savings.", "motivation": "To quantify the impact of workflow parameters on time-savings in report turnaround time (TAT) following deployment of an AI-triage device for prioritizing pulmonary embolism in chest CT pulmonary angiography exams.", "method": "Retrospective study of 11,252 adult CTPA exams comparing pre-AI and post-AI periods. Analyzed TAT for PE-positive exams and extracted workflow parameters from 527,234 PACS records including exam inter-arrival time and radiologist read-time. Used computational model to predict time-savings.", "result": "Significant time-savings during work hours (22.2 minutes, p=0.004) but not during off-hours (2.82 minutes, p=0.345). Model predictions aligned with observed results (29.6 minutes for work hours, 2.10 minutes for off-hours). Pre-AI PE-positive rate was 13.3%, post-AI was 16.2%.", "conclusion": "Consideration and quantification of clinical workflow parameters are essential for accurate assessment of expected time-savings in TAT following AI-triage device deployment, with significant benefits primarily during work hours."}}
{"id": "2510.15744", "categories": ["cs.AR", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15744", "abs": "https://arxiv.org/abs/2510.15744", "authors": ["Haocong Luo", "Ataberk Olgun", "Maria Makeenkova", "F. Nisa Bostanci", "Geraldo F. Oliveira", "A. Giray Yaglikci", "Onur Mutlu"], "title": "Cleaning up the Mess", "comment": null, "summary": "A MICRO 2024 best paper runner-up publication (the Mess paper) with all three\nartifact badges awarded (including \"Reproducible\") proposes a new benchmark to\nevaluate real and simulated memory system performance. In this paper, we\ndemonstrate that the Ramulator 2.0 simulation results reported in the Mess\npaper are incorrect and, at the time of the publication of the Mess paper,\nirreproducible. We find that the authors of Mess paper made multiple trivial\nhuman errors in both the configuration and usage of the simulators. We show\nthat by correctly configuring Ramulator 2.0, Ramulator 2.0's simulated memory\nsystem performance actually resembles real system characteristics well, and\nthus a key claimed contribution of the Mess paper is factually incorrect. We\nalso identify that the DAMOV simulation results in the Mess paper use wrong\nsimulation statistics that are unrelated to the simulated DRAM performance.\nMoreover, the Mess paper's artifact repository lacks the necessary sources to\nfully reproduce all the Mess paper's results.\n  Our work corrects the Mess paper's errors regarding Ramulator 2.0 and\nidentifies important issues in the Mess paper's memory simulator evaluation\nmethodology. We emphasize the importance of both carefully and rigorously\nvalidating simulation results and contacting simulator authors and developers,\nin true open source spirit, to ensure these simulators are used with correct\nconfigurations and as intended. We encourage the computer architecture\ncommunity to correct the Mess paper's errors. This is necessary to prevent the\npropagation of inaccurate and misleading results, and to maintain the\nreliability of the scientific record. Our investigation also opens up questions\nabout the integrity of the review and artifact evaluation processes. To aid\nfuture work, our source code and scripts are openly available at https:\n//github.com/CMU-SAFARI/ramulator2/tree/mess.", "AI": {"tldr": "This paper critiques the Mess paper (MICRO 2024 best paper runner-up) by demonstrating that its Ramulator 2.0 simulation results are incorrect and irreproducible due to configuration errors, and identifies issues with DAMOV simulation statistics and artifact reproducibility.", "motivation": "To correct factual errors in the Mess paper's evaluation of memory system performance simulators, particularly regarding Ramulator 2.0, and to address concerns about the reliability of the scientific record and review processes.", "method": "The authors analyzed the Mess paper's simulation configurations and usage, identified multiple human errors in simulator setup, and conducted their own experiments with correctly configured Ramulator 2.0 to compare results.", "result": "Found that Ramulator 2.0's simulated memory performance actually resembles real system characteristics when properly configured, contradicting the Mess paper's claims. Also identified incorrect DAMOV simulation statistics and incomplete artifact repository in the Mess paper.", "conclusion": "The Mess paper contains significant errors in simulator evaluation methodology and results. The community should correct these errors to prevent propagation of misleading results and maintain scientific integrity. Proper validation and collaboration with simulator developers are essential."}}
{"id": "2510.15095", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15095", "abs": "https://arxiv.org/abs/2510.15095", "authors": ["Md Sabbir Hossain Polak", "David Troendle", "Byunghyun Jang"], "title": "Hive Hash Table: A Warp-Cooperative, Dynamically Resizable Hash Table for GPUs", "comment": null, "summary": "Hash tables are essential building blocks in data-intensive applications, yet\nexisting GPU implementations often struggle with concurrent updates, high load\nfactors, and irregular memory access patterns. We present Hive hash table, a\nhigh-performance, warp-cooperative and dynamically resizable GPU hash table\nthat adapts to varying workloads without global rehashing.\n  Hive hash table makes three key contributions. First, a cache-aligned packed\nbucket layout stores key-value pairs as 64-bit words, enabling coalesced memory\naccess and atomic updates via single-CAS operations. Second, warp-synchronous\nconcurrency protocols - Warp-Aggregated-Bitmask-Claim (WABC) and\nWarp-Cooperative Match-and-Elect (WCME) - reduce contention to one atomic\noperation per warp while ensuring lock-free progress. Third, a\nload-factor-aware dynamic resizing strategy expands or contracts capacity in\nwarp-parallel K-bucket batches using linear hashing, maintaining balanced\noccupancy. To handle insertions under heavy contention, Hive hash table employs\na four-step strategy: replace, claim-and-commit, bounded cuckoo eviction, and\noverflow-stash fallback. This design provides lock-free fast paths and bounded\nrecovery cost under contention determined by a fixed eviction depth, while\neliminating ABA hazards during concurrent updates.\n  Experimental evaluation on an NVIDIA RTX 4090 shows Hive hash table sustains\nload factors up to 95% while delivering 1.5-2x higher throughput than\nstate-of-the-art GPU hash tables (Slab-Hash, DyCuckoo, WarpCore) under mixed\ninsert-delete-lookup workloads. On balanced workload, Hive hash table reaches\n3.5 billion updates/s and nearly 4 billion lookups/s, demonstrating scalability\nand efficiency for GPU-accelerated data processing.", "AI": {"tldr": "Hive hash table is a high-performance GPU hash table that uses warp-cooperative techniques, packed bucket layout, and dynamic resizing to achieve high throughput and load factors up to 95%, outperforming existing GPU hash tables.", "motivation": "Existing GPU hash tables struggle with concurrent updates, high load factors, and irregular memory access patterns, limiting their performance in data-intensive applications.", "method": "Uses cache-aligned packed bucket layout for coalesced memory access, warp-synchronous concurrency protocols (WABC and WCME) to reduce contention, and load-factor-aware dynamic resizing with linear hashing. Employs a four-step insertion strategy with replace, claim-and-commit, bounded cuckoo eviction, and overflow-stash fallback.", "result": "Achieves load factors up to 95% with 1.5-2x higher throughput than state-of-the-art GPU hash tables (Slab-Hash, DyCuckoo, WarpCore). On balanced workloads, reaches 3.5 billion updates/s and nearly 4 billion lookups/s on NVIDIA RTX 4090.", "conclusion": "Hive hash table demonstrates superior scalability and efficiency for GPU-accelerated data processing through its warp-cooperative design, lock-free protocols, and dynamic resizing capabilities."}}
{"id": "2510.15263", "categories": ["cs.OS"], "pdf": "https://arxiv.org/pdf/2510.15263", "abs": "https://arxiv.org/abs/2510.15263", "authors": ["Davi Ant\u00f4nio da Silva Santos", "Bruno C\u00e9sar Ribas"], "title": "Maratona Linux a tale of upgrading from Ubuntu 20.04 to 22.04", "comment": "10 pages, 1 figure, 3 tables", "summary": "Maratona Linux is the development environment used since 2016 on the\n``Maratona de Programa\\c{c}\\~ao'', ICPC's South American regional contest. It\nconsists of Debian packages that modify a standard Ubuntu installation in order\nto make it suitable for the competition, installing IDEs, documentation,\ncompilers, debuggers, interpreters, and enforcing network restrictions. The\nproject, which began based on Ubuntu 16.04, has been successfully migrated from\n20.04 to 22.04, the current Long-term Support (LTS) version. The project has\nalso been improved by adding static analyzers, updating the package dependency\nmap, splitting large packages, and enhancing the packaging pipeline.", "AI": {"tldr": "Maratona Linux is a development environment for ICPC's South American programming contest, built on Ubuntu LTS with IDEs, compilers, and network restrictions. It has been successfully migrated from Ubuntu 20.04 to 22.04 LTS with added improvements.", "motivation": "To create and maintain a standardized development environment for the ICPC South American regional programming contest that ensures consistency, security, and proper tooling for all participants.", "method": "Developed as Debian packages that modify standard Ubuntu installations, installing necessary development tools (IDEs, compilers, debuggers, interpreters), documentation, and enforcing network restrictions. The project involves systematic migration between Ubuntu LTS versions and continuous improvement of the packaging system.", "result": "Successfully migrated from Ubuntu 16.04 to 20.04 and then to 22.04 LTS. Improved the system by adding static analyzers, updating package dependencies, splitting large packages, and enhancing the packaging pipeline.", "conclusion": "Maratona Linux has proven to be a robust and maintainable development environment for programming competitions, with successful version migrations and continuous improvements that enhance its functionality and reliability for contest participants."}}
{"id": "2510.15122", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15122", "abs": "https://arxiv.org/abs/2510.15122", "authors": ["Fran\u00e7ois Ezard", "Can Umut Ileri", "J\u00e9r\u00e9mie Decouchant"], "title": "NEMO: Faster Parallel Execution for Highly Contended Blockchain Workloads (Full version)", "comment": "This is the full version of a paper that will appear at the 7th\n  Conference on Blockchain Research & Applications for Innovative Networks and\n  Services (BRAINS 2025)", "summary": "Following the design of more efficient blockchain consensus algorithms, the\nexecution layer has emerged as the new performance bottleneck of blockchains,\nespecially under high contention. Current parallel execution frameworks either\nrely on optimistic concurrency control (OCC) or on pessimistic concurrency\ncontrol (PCC), both of which see their performance decrease when workloads are\nhighly contended, albeit for different reasons. In this work, we present NEMO,\na new blockchain execution engine that combines OCC with the object data model\nto address this challenge. NEMO introduces four core innovations: (i) a greedy\ncommit rule for transactions using only owned objects; (ii) refined handling of\ndependencies to reduce re-executions; (iii) the use of incomplete but\nstatically derivable read/write hints to guide execution; and (iv) a\npriority-based scheduler that favors transactions that unblock others. Through\nsimulated execution experiments, we demonstrate that NEMO significantly reduces\nredundant computation and achieves higher throughput than representative\napproaches. For example, with 16 workers NEMO's throughput is up to 42% higher\nthan the one of Block-STM, the state-of-the-art OCC approach, and 61% higher\nthan the pessimistic concurrency control baseline used.", "AI": {"tldr": "NEMO is a blockchain execution engine that combines optimistic concurrency control with object data model to improve performance under high contention workloads, achieving up to 42% higher throughput than state-of-the-art approaches.", "motivation": "Current parallel execution frameworks using OCC or PCC suffer performance degradation under high contention workloads, making execution layer the new blockchain performance bottleneck.", "method": "NEMO introduces four innovations: greedy commit rule for owned objects, refined dependency handling, static read/write hints, and priority-based scheduler favoring transactions that unblock others.", "result": "Simulation experiments show NEMO significantly reduces redundant computation and achieves higher throughput - up to 42% higher than Block-STM and 61% higher than pessimistic concurrency control baseline with 16 workers.", "conclusion": "NEMO effectively addresses the execution layer bottleneck in blockchains under high contention by combining OCC with object data model and novel optimization techniques."}}
{"id": "2510.15147", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15147", "abs": "https://arxiv.org/abs/2510.15147", "authors": ["Aditya Bhosale", "Kavitha Chandrasekar", "Laxmikant Kale", "Sara Kokkila-Schumacher"], "title": "An Elastic Job Scheduler for HPC Applications on the Cloud", "comment": null, "summary": "The last few years have seen an increase in adoption of the cloud for running\nHPC applications. The pay-as-you-go cost model of these cloud resources has\nnecessitated the development of specialized programming models and schedulers\nfor HPC jobs for efficient utilization of cloud resources. A key aspect of\nefficient utilization is the ability to rescale applications on the fly to\nmaximize the utilization of cloud resources. Most commonly used parallel\nprogramming models like MPI have traditionally not supported autoscaling either\nin a cloud environment or on supercomputers. While more recent work has been\ndone to implement this functionality in MPI, it is still nascent and requires\nadditional programmer effort. Charm++ is a parallel programming model that\nnatively supports dynamic rescaling through its migratable objects paradigm. In\nthis paper, we present a Kubernetes operator to run Charm++ applications on a\nKubernetes cluster. We then present a priority-based elastic job scheduler that\ncan dynamically rescale jobs based on the state of a Kubernetes cluster to\nmaximize cluster utilization while minimizing response time for high-priority\njobs. We show that our elastic scheduler, with the ability to rescale HPC jobs\nwith minimal overhead, demonstrates significant performance improvements over\ntraditional static schedulers.", "AI": {"tldr": "A Kubernetes operator and elastic scheduler for Charm++ HPC applications that enables dynamic rescaling to maximize cloud resource utilization while minimizing response time for high-priority jobs.", "motivation": "The pay-as-you-go cost model of cloud resources requires efficient utilization through dynamic rescaling capabilities, which traditional MPI lacks but Charm++ natively supports through migratable objects.", "method": "Developed a Kubernetes operator for running Charm++ applications and implemented a priority-based elastic job scheduler that dynamically rescales jobs based on Kubernetes cluster state.", "result": "The elastic scheduler demonstrates significant performance improvements over traditional static schedulers, with minimal overhead for rescaling HPC jobs.", "conclusion": "The proposed solution effectively enables dynamic rescaling of HPC applications in cloud environments, maximizing resource utilization while prioritizing high-priority jobs."}}
{"id": "2510.15215", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15215", "abs": "https://arxiv.org/abs/2510.15215", "authors": ["Zhimin Qiu", "Feng Liu", "Yuxiao Wang", "Chenrui Hu", "Ziyu Cheng", "Di Wu"], "title": "Spatiotemporal Traffic Prediction in Distributed Backend Systems via Graph Neural Networks", "comment": null, "summary": "This paper addresses the problem of traffic prediction in distributed backend\nsystems and proposes a graph neural network based modeling approach to overcome\nthe limitations of traditional models in capturing complex dependencies and\ndynamic features. The system is abstracted as a graph with nodes and edges,\nwhere node features represent traffic and resource states, and adjacency\nrelations describe service interactions. A graph convolution mechanism enables\nmulti order propagation and aggregation of node features, while a gated\nrecurrent structure models historical sequences dynamically, thus integrating\nspatial structures with temporal evolution. A spatiotemporal joint modeling\nmodule further fuses graph representation with temporal dependency, and a\ndecoder generates future traffic predictions. The model is trained with mean\nsquared error to minimize deviations from actual values. Experiments based on\npublic distributed system logs construct combined inputs of node features,\ntopology, and sequences, and compare the proposed method with mainstream\nbaselines using MSE, RMSE, MAE, and MAPE. Results show that the proposed method\nachieves stable performance and low error across different prediction horizons\nand model depths, significantly improving the accuracy and robustness of\ntraffic forecasting in distributed backend systems and verifying the potential\nof graph neural networks in complex system modeling.", "AI": {"tldr": "Proposes a graph neural network approach for traffic prediction in distributed backend systems, combining spatial graph structures with temporal dependencies to overcome traditional model limitations.", "motivation": "Traditional models struggle to capture complex dependencies and dynamic features in distributed systems, necessitating a more sophisticated approach for accurate traffic forecasting.", "method": "Abstracts system as graph with nodes/edges, uses graph convolution for spatial propagation, gated recurrent structure for temporal modeling, spatiotemporal joint modeling module, and decoder for predictions trained with mean squared error.", "result": "Achieves stable performance and low error across different prediction horizons and model depths, significantly improving accuracy and robustness compared to mainstream baselines.", "conclusion": "Demonstrates the effectiveness of graph neural networks for traffic prediction in distributed backend systems and verifies their potential in complex system modeling."}}
{"id": "2510.15330", "categories": ["cs.DC", "cs.AI", "cs.CL", "cs.NI"], "pdf": "https://arxiv.org/pdf/2510.15330", "abs": "https://arxiv.org/abs/2510.15330", "authors": ["Tella Rajashekhar Reddy", "Atharva Deshmukh", "Karan Tandon", "Rohan Gandhi", "Anjaly Parayil", "Debopam Bhattacherjee"], "title": "BeLLMan: Controlling LLM Congestion", "comment": "To be presented at FAISYS 2025", "summary": "Large language model (LLM) applications are blindfolded to the infrastructure\nunderneath and generate tokens autoregressively, indifferent to the system\nload, thus risking inferencing latency inflation and poor user experience. Our\nfirst-cut controller, named beLLMan, enables the LLM infrastructure to actively\nand progressively signal the first-party LLM application to adjust the output\nlength in response to changing system load. On a real testbed with H100 GPUs,\nbeLLMan helps keep inferencing latency under control (upto 8X lower end-to-end\nlatency) and reduces energy consumption by 25% (while serving 19% more\nrequests) during periods of congestion for a summarization workload.", "AI": {"tldr": "beLLMan is a controller that enables LLM infrastructure to signal applications to adjust output length based on system load, reducing latency and energy consumption.", "motivation": "LLM applications operate blindly to infrastructure load, causing latency inflation and poor user experience during congestion.", "method": "beLLMan actively signals first-party LLM applications to progressively adjust output length in response to changing system load conditions.", "result": "On H100 GPU testbed: 8X lower end-to-end latency, 25% energy reduction while serving 19% more requests for summarization workload during congestion.", "conclusion": "beLLMan effectively manages system load by controlling output length, significantly improving latency and energy efficiency in LLM inference."}}
{"id": "2510.15355", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15355", "abs": "https://arxiv.org/abs/2510.15355", "authors": ["Tim Kraus", "Axel Sauer", "Ingo Feldner"], "title": "Cloud-Enabled Virtual Prototypes", "comment": "8 pages, 5 figures, Published in DVCon Europe 2025", "summary": "The rapid evolution of embedded systems, along with the growing variety and\ncomplexity of AI algorithms, necessitates a powerful hardware/software\nco-design methodology based on virtual prototyping technologies. The market\noffers a diverse range of simulation solutions, each with its unique\ntechnological approach and therefore strengths and weaknesses. Additionally,\nwith the increasing availability of remote on-demand computing resources and\ntheir adaptation throughout the industry, the choice of the host infrastructure\nfor execution opens even more new possibilities for operational strategies.\nThis work explores the dichotomy between local and cloud-based simulation\nenvironments, focusing on the trade-offs between scalability and privacy. We\ndiscuss how the setup of the compute infrastructure impacts the performance of\nthe execution and security of data involved in the process. Furthermore, we\nhighlight the development workflow associated with embedded AI and the critical\nrole of efficient simulations in optimizing these algorithms. With the proposed\nsolution, we aim to sustainably improve trust in remote simulations and\nfacilitate the adoption of virtual prototyping practices.", "AI": {"tldr": "This paper explores the trade-offs between local and cloud-based simulation environments for embedded AI systems, focusing on scalability vs. privacy, and proposes solutions to improve trust in remote simulations.", "motivation": "The rapid evolution of embedded systems and complex AI algorithms requires powerful hardware/software co-design methodology using virtual prototyping. The diversity of simulation solutions and availability of remote computing resources create new operational possibilities.", "method": "The work examines the dichotomy between local and cloud-based simulation environments, analyzing how compute infrastructure setup impacts performance and data security. It discusses development workflows for embedded AI and the role of efficient simulations.", "result": "The paper highlights the trade-offs between scalability and privacy in simulation environments, and how infrastructure choices affect execution performance and data security in embedded AI development.", "conclusion": "The proposed solution aims to sustainably improve trust in remote simulations and facilitate the adoption of virtual prototyping practices for embedded AI systems."}}
{"id": "2510.15473", "categories": ["cs.DC", "math.PR"], "pdf": "https://arxiv.org/pdf/2510.15473", "abs": "https://arxiv.org/abs/2510.15473", "authors": ["Petra Berenbrink", "Robert Els\u00e4sser", "Tom Friedetzky", "Hamed Hosseinpour", "Dominik Kaaser", "Peter Kling", "Thomas Sauerwald"], "title": "(Almost) Perfect Discrete Iterative Load Balancing", "comment": null, "summary": "We consider discrete, iterative load balancing via matchings on arbitrary\ngraphs. Initially each node holds a certain number of tokens, defining the load\nof the node, and the objective is to redistribute the tokens such that\neventually each node has approximately the same number of tokens. We present\nresults for a general class of simple local balancing schemes where the tokens\nare balanced via matchings. In each round the process averages the tokens of\nany two matched nodes. If the sum of their tokens is odd, the node to receive\nthe one excess token is selected at random. Our class covers three popular\nmodels: in the matching model a new matching is generated randomly in each\nround, in the balancing circuit model a fixed sequence of matchings is applied\nperiodically, and in the asynchronous model the load is balanced over a\nrandomly chosen edge.\n  We measure the quality of a load vector by its discrepancy, defined as the\ndifference between the maximum and minimum load across all nodes. As our main\nresult we show that with high probability our discrete balancing scheme reaches\na discrepancy of $3$ in a number of rounds which asymptotically matches the\nspectral bound for continuous load balancing with fractional load.\n  This result improves and tightens a long line of previous works, by not only\nachieving a small constant discrepancy (instead of a non-explicit, large\nconstant) but also holding for arbitrary instead of regular graphs. The result\nalso demonstrates that in the general model we consider, discrete load\nbalancing is no harder than continuous load balancing.", "AI": {"tldr": "Discrete load balancing via matchings achieves constant discrepancy of 3 in rounds matching continuous balancing bounds, improving previous works and showing discrete balancing is as efficient as continuous.", "motivation": "To understand if discrete load balancing with integer tokens can achieve similar efficiency as continuous fractional load balancing, and to improve upon previous large-constant discrepancy bounds.", "method": "Simple local balancing schemes using matchings where tokens are averaged between matched nodes, with random tie-breaking for odd sums. Covers three models: random matching per round, fixed periodic matching sequences, and asynchronous edge balancing.", "result": "With high probability, achieves discrepancy of 3 in number of rounds that asymptotically matches spectral bounds for continuous load balancing, working for arbitrary graphs.", "conclusion": "Discrete load balancing is no harder than continuous load balancing, achieving small constant discrepancy efficiently across various matching models and arbitrary graph structures."}}
{"id": "2510.15485", "categories": ["cs.DC", "cs.DB", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.15485", "abs": "https://arxiv.org/abs/2510.15485", "authors": ["D\u0101vis Ka\u017eemaks", "Laurens Versluis", "Burcu Kulahcioglu Ozkan", "J\u00e9r\u00e9mie Decouchant"], "title": "Balancing Fairness and Performance in Multi-User Spark Workloads with Dynamic Scheduling (extended version)", "comment": "This paper is an extended version of a paper accepted at the ACM\n  Symposium on Cloud Computing (SoCC'25) that contains a proof of correctness", "summary": "Apache Spark is a widely adopted framework for large-scale data processing.\nHowever, in industrial analytics environments, Spark's built-in schedulers,\nsuch as FIFO and fair scheduling, struggle to maintain both user-level fairness\nand low mean response time, particularly in long-running shared applications.\nExisting solutions typically focus on job-level fairness which unintentionally\nfavors users who submit more jobs. Although Spark offers a built-in fair\nscheduler, it lacks adaptability to dynamic user workloads and may degrade\noverall job performance. We present the User Weighted Fair Queuing (UWFQ)\nscheduler, designed to minimize job response times while ensuring equitable\nresource distribution across users and their respective jobs. UWFQ simulates a\nvirtual fair queuing system and schedules jobs based on their estimated finish\ntimes under a bounded fairness model. To further address task skew and reduce\npriority inversions, which are common in Spark workloads, we introduce runtime\npartitioning, a method that dynamically refines task granularity based on\nexpected runtime. We implement UWFQ within the Spark framework and evaluate its\nperformance using multi-user synthetic workloads and Google cluster traces. We\nshow that UWFQ reduces the average response time of small jobs by up to 74%\ncompared to existing built-in Spark schedulers and to state-of-the-art fair\nscheduling algorithms.", "AI": {"tldr": "UWFQ scheduler improves Spark performance by ensuring user-level fairness and reducing job response times through virtual fair queuing and dynamic task partitioning.", "motivation": "Spark's built-in schedulers struggle with maintaining user-level fairness and low response times in shared applications, favoring users who submit more jobs and lacking adaptability to dynamic workloads.", "method": "Developed User Weighted Fair Queuing (UWFQ) scheduler that simulates virtual fair queuing, schedules jobs based on estimated finish times with bounded fairness, and introduces runtime partitioning to address task skew and reduce priority inversions.", "result": "UWFQ reduces average response time of small jobs by up to 74% compared to existing Spark schedulers and state-of-the-art fair scheduling algorithms, as demonstrated through multi-user synthetic workloads and Google cluster traces.", "conclusion": "UWFQ effectively addresses Spark's scheduling limitations by providing better user-level fairness and significantly improved job performance through innovative queuing and dynamic task partitioning techniques."}}
{"id": "2510.15490", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15490", "abs": "https://arxiv.org/abs/2510.15490", "authors": ["Diogo Landau", "Gijs Blanken", "Jorge Barbosa", "Nishant Saurabh"], "title": "Retrofitting Service Dependency Discovery in Distributed Systems", "comment": null, "summary": "Modern distributed systems rely on complex networks of interconnected\nservices, creating direct or indirect dependencies that can propagate faults\nand cause cascading failures. To localize the root cause of performance\ndegradation in these environments, constructing a service dependency graph is\nhighly beneficial. However, building an accurate service dependency graph is\nimpaired by complex routing techniques, such as Network Address Translation\n(NAT), an essential mechanism for connecting services across networks. NAT\nobfuscates the actual hosts running the services, causing existing run-time\napproaches that passively observe network metadata to fail in accurately\ninferring service dependencies. To this end, this paper introduces XXXX, a\nnovel run-time system for constructing process-level service dependency graphs.\nIt operates without source code instrumentation and remains resilient under\ncomplex network routing mechanisms, including NAT. XXXX implements a\nnon-disruptive method of injecting metadata onto a TCP packet's header that\nmaintains protocol correctness across host boundaries. In other words, if no\nreceiving agent is present, the instrumentation leaves existing TCP connections\nunaffected, ensuring non-disruptive operation when it is partially deployed\nacross hosts. We evaluated XXXX extensively against three state-of-the-art\nsystems across nine scenarios, involving three network configurations\n(NAT-free, internal-NAT, external-NAT) and three microservice benchmarks. XXXX\nwas the only approach that performed consistently across networking\nconfigurations. With regards to correctness, it performed on par with, or\nbetter than, the state-of-the-art with precision and recall values of 100% in\nthe majority of the scenarios.", "AI": {"tldr": "XXXX is a novel runtime system that constructs process-level service dependency graphs in distributed systems, overcoming NAT obfuscation through non-disruptive TCP packet header metadata injection without requiring source code instrumentation.", "motivation": "Modern distributed systems with complex service dependencies suffer from cascading failures, and existing runtime approaches fail to accurately infer service dependencies due to NAT obfuscation that hides actual service hosts.", "method": "XXXX implements non-disruptive metadata injection into TCP packet headers that maintains protocol correctness across host boundaries, working without source code instrumentation and remaining resilient under complex network routing including NAT.", "result": "XXXX was the only approach that performed consistently across all network configurations (NAT-free, internal-NAT, external-NAT) and achieved precision and recall values of 100% in most scenarios, outperforming three state-of-the-art systems.", "conclusion": "XXXX provides an effective solution for constructing accurate service dependency graphs in complex distributed environments with NAT, offering consistent performance and high correctness without disrupting existing TCP connections."}}
{"id": "2510.15652", "categories": ["cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15652", "abs": "https://arxiv.org/abs/2510.15652", "authors": ["Ahmad Raeisi", "Mahdi Dolati", "Sina Darabi", "Sadegh Talebi", "Patrick Eugster", "Ahmad Khonsari"], "title": "GOGH: Correlation-Guided Orchestration of GPUs in Heterogeneous Clusters", "comment": "10 pages, 5 figures", "summary": "The growing demand for computational resources in machine learning has made\nefficient resource allocation a critical challenge, especially in heterogeneous\nhardware clusters where devices vary in capability, age, and energy efficiency.\nUpgrading to the latest hardware is often infeasible, making sustainable use of\nexisting, mixed-generation resources essential. In this paper, we propose a\nlearning-based architecture for managing machine learning workloads in\nheterogeneous clusters. The system operates online, allocating resources to\nincoming training or inference requests while minimizing energy consumption and\nmeeting performance requirements. It uses two neural networks: the first\nprovides initial estimates of how well a new model will utilize different\nhardware types and how it will affect co-located models. An optimizer then\nallocates resources based on these estimates. After deployment, the system\nmonitors real performance and uses this data to refine its predictions via a\nsecond neural network. This updated model improves estimates not only for the\ncurrent hardware but also for hardware not initially allocated and for\nco-location scenarios not yet observed. The result is an adaptive, iterative\napproach that learns over time to make more effective resource allocation\ndecisions in heterogeneous deep learning clusters.", "AI": {"tldr": "A learning-based system for managing ML workloads in heterogeneous clusters using two neural networks to optimize resource allocation while minimizing energy consumption and meeting performance requirements.", "motivation": "The growing computational demands in ML and the impracticality of upgrading to latest hardware necessitate sustainable use of existing mixed-generation resources in heterogeneous clusters.", "method": "The system uses two neural networks: one provides initial estimates of model performance on different hardware and co-location effects, while an optimizer allocates resources based on these estimates. After deployment, real performance data refines predictions via a second neural network.", "result": "The approach creates an adaptive, iterative system that learns over time to make more effective resource allocation decisions, improving estimates for both allocated and unallocated hardware and unobserved co-location scenarios.", "conclusion": "The proposed learning-based architecture enables efficient and sustainable resource management in heterogeneous deep learning clusters through continuous adaptation and refinement of allocation decisions."}}
{"id": "2510.15698", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15698", "abs": "https://arxiv.org/abs/2510.15698", "authors": ["Sebastian Brandt", "Tim G\u00f6ttlicher"], "title": "A Post-Quantum Lower Bound for the Distributed Lov\u00e1sz Local Lemma", "comment": "46 pages, 3 figures", "summary": "In this work, we study the Lov\\'asz local lemma (LLL) problem in the area of\ndistributed quantum computing, which has been the focus of attention of recent\nadvances in quantum computing [STOC'24, STOC'25, STOC'25]. We prove a lower\nbound of $2^{\\Omega(\\log^* n)}$ for the complexity of the distributed LLL in\nthe quantum-LOCAL model. More specifically, we obtain our lower bound already\nfor a very well-studied special case of the LLL, called sinkless orientation,\nin a stronger model than quantum-LOCAL, called the randomized online-LOCAL\nmodel. As a consequence, we obtain the same lower bounds for sinkless\norientation and the distributed LLL also in a variety of other models studied\nacross different research communities.\n  Our work provides the first superconstant lower bound for sinkless\norientation and the distributed LLL in all of these models, addressing recently\nstated open questions. Moreover, to obtain our results, we develop an entirely\nnew lower bound technique that we believe has the potential to become the first\ngeneric technique for proving post-quantum lower bounds for many of the most\nimportant problems studied in the context of locality.", "AI": {"tldr": "This paper proves a superconstant lower bound of 2^\u03a9(log* n) for distributed Lov\u00e1sz local lemma (LLL) problems in quantum-LOCAL models, specifically for sinkless orientation, using a new lower bound technique.", "motivation": "Recent advances in quantum computing have focused on distributed quantum computing, and there was a need to understand the complexity of fundamental problems like the Lov\u00e1sz local lemma in quantum distributed models, addressing open questions about lower bounds.", "method": "The authors developed an entirely new lower bound technique to prove complexity bounds, focusing on the sinkless orientation problem as a special case of LLL, and analyzed it in the quantum-LOCAL model and the stronger randomized online-LOCAL model.", "result": "They proved a lower bound of 2^\u03a9(log* n) for distributed LLL problems, specifically for sinkless orientation, which represents the first superconstant lower bound for these problems across various distributed computing models.", "conclusion": "The work establishes fundamental complexity limitations for distributed LLL problems in quantum settings and introduces a promising new technique for proving post-quantum lower bounds that could be applicable to many important locality problems."}}
{"id": "2510.15755", "categories": ["cs.DC", "cs.OS"], "pdf": "https://arxiv.org/pdf/2510.15755", "abs": "https://arxiv.org/abs/2510.15755", "authors": ["Atsushi Koshiba", "Charalampos Mainas", "Pramod Bhatotia"], "title": "Funky: Cloud-Native FPGA Virtualization and Orchestration", "comment": "17 pages, ACM Symposium on Cloud Computing (SoCC'25)", "summary": "The adoption of FPGAs in cloud-native environments is facing impediments due\nto FPGA limitations and CPU-oriented design of orchestrators, as they lack\nvirtualization, isolation, and preemption support for FPGAs. Consequently,\ncloud providers offer no orchestration services for FPGAs, leading to low\nscalability, flexibility, and resiliency.\n  This paper presents Funky, a full-stack FPGA-aware orchestration engine for\ncloud-native applications. Funky offers primary orchestration services for FPGA\nworkloads to achieve high performance, utilization, scalability, and fault\ntolerance, accomplished by three contributions: (1) FPGA virtualization for\nlightweight sandboxes, (2) FPGA state management enabling task preemption and\ncheckpointing, and (3) FPGA-aware orchestration components following the\nindustry-standard CRI/OCI specifications.\n  We implement and evaluate Funky using four x86 servers with Alveo U50 FPGA\ncards. Our evaluation highlights that Funky allows us to port 23 OpenCL\napplications from the Xilinx Vitis and Rosetta benchmark suites by modifying\n3.4% of the source code while keeping the OCI image sizes 28.7 times smaller\nthan AMD's FPGA-accessible Docker containers. In addition, Funky incurs only\n7.4% performance overheads compared to native execution, while providing\nvirtualization support with strong hypervisor-enforced isolation and\ncloud-native orchestration for a set of distributed FPGAs. Lastly, we evaluate\nFunky's orchestration services in a large-scale cluster using Google production\ntraces, showing its scalability, fault tolerance, and scheduling efficiency.", "AI": {"tldr": "Funky is a full-stack FPGA-aware orchestration engine that addresses FPGA limitations in cloud environments by providing virtualization, state management, and cloud-native orchestration services, achieving high performance with minimal overhead.", "motivation": "FPGAs face adoption barriers in cloud-native environments due to lack of virtualization, isolation, and preemption support in CPU-oriented orchestrators, leading to low scalability and flexibility.", "method": "Funky provides three key contributions: FPGA virtualization for lightweight sandboxes, FPGA state management enabling task preemption and checkpointing, and FPGA-aware orchestration components following CRI/OCI specifications.", "result": "Funky ports 23 OpenCL applications with only 3.4% code modification, reduces OCI image sizes by 28.7x compared to AMD's containers, incurs only 7.4% performance overhead, and demonstrates scalability and fault tolerance using Google production traces.", "conclusion": "Funky successfully enables cloud-native FPGA orchestration with high performance, strong isolation, and efficient resource management, making FPGAs more accessible and practical for cloud deployments."}}
